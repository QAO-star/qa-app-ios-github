default_platform(:ios)

platform :ios do
  desc "Test API key authentication"
  lane :test_api_key do
    begin
      puts "🔍 Debugging API key..."
      puts "Key ID: #{ENV['APP_STORE_CONNECT_API_KEY_ID']}"
      puts "Issuer ID: #{ENV['APP_STORE_CONNECT_ISSUER_ID']}"
      puts "Key content length: #{ENV['APP_STORE_CONNECT_API_KEY']&.length}"
      puts "Key content first line: #{ENV['APP_STORE_CONNECT_API_KEY']&.lines&.first&.strip}"
      puts "Key content last line: #{ENV['APP_STORE_CONNECT_API_KEY']&.lines&.last&.strip}"
      
      api_key = app_store_connect_api_key(
        key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
        issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
        key_content: ENV["APP_STORE_CONNECT_API_KEY"],
        is_key_content_base64: false,
        duration: 1200,
        in_house: false
      )
      
      UI.success("✅ API key authentication successful")
      puts "🔍 API Key ID: #{api_key[:key_id]}"
      puts "🔍 Issuer ID: #{api_key[:issuer_id]}"
      
    rescue => e
      UI.error("❌ API key authentication failed: #{e.message}")
      puts "🔍 Full error details: #{e.backtrace.join("\n")}"
      raise e
    end
  end
  
  desc "Generate certificates and provisioning profiles"
  lane :certificates do
    begin
      puts "🔐 Creating API key object..."
      api_key = app_store_connect_api_key(
        key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
        issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
        key_content: ENV["APP_STORE_CONNECT_API_KEY"],
        is_key_content_base64: false,
        duration: 1200,
        in_house: false
      )
      puts "✅ API key object created successfully"
      
      # Try certificate generation with error handling
      begin
        cert(
          development: false,
          output_path: "./certificates/",
          api_key: api_key,
          team_id: ENV["APPLE_TEAM_ID"]
        )
        puts "✅ Certificate generation succeeded!"
      rescue => e
        puts "⚠️ Certificate generation failed: #{e.message}"
        puts "📁 Creating certificates directory..."
        Dir.mkdir("./certificates") unless Dir.exist?("./certificates")
      end
      
      # Try provisioning profile generation
      begin
        sigh(
          development: false,
          app_identifier: "com.qaonline.app",
          output_path: "./certificates/",
          filename: "QA-Online-App-Store-Profile.mobileprovision",
          api_key: api_key,
          team_id: ENV["APPLE_TEAM_ID"]
        )
        puts "✅ Provisioning profile generation succeeded!"
      rescue => e
        puts "⚠️ Provisioning profile generation failed: #{e.message}"
      end
      
    rescue => e
      UI.error("❌ Failed to create API key: #{e.message}")
      puts "⚠️ Continuing without certificate generation..."
    end
  end
  
  desc "Upload to App Store Connect"
  lane :upload do
    begin
      api_key = app_store_connect_api_key(
        key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
        issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
        key_content: ENV["APP_STORE_CONNECT_API_KEY"],
        is_key_content_base64: false,
        duration: 1200,
        in_house: false
      )
      
      pilot(
        ipa: "App.ipa",
        skip_waiting_for_build_processing: true,
        skip_submission: true,
        api_key: api_key
      )
      
      puts "✅ Upload to App Store Connect completed"
    rescue => e
      UI.error("❌ Upload failed: #{e.message}")
      raise e
    end
  end
end

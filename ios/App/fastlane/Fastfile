default_platform(:ios)

platform :ios do
  desc "Test API key authentication"
  lane :test_api_key do
    begin
      puts "🔍 Debugging API key..."
      puts "Key ID: #{ENV['APP_STORE_CONNECT_API_KEY_ID']}"
      puts "Issuer ID: #{ENV['APP_STORE_CONNECT_ISSUER_ID']}"
      puts "Key content length: #{ENV['APP_STORE_CONNECT_API_KEY']&.length}"
      puts "Key content first line: #{ENV['APP_STORE_CONNECT_API_KEY']&.lines&.first&.strip}"
      puts "Key content last line: #{ENV['APP_STORE_CONNECT_API_KEY']&.lines&.last&.strip}"
      
      # Test API key authentication
      api_key = app_store_connect_api_key(
        key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
        issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
        key_content: ENV["APP_STORE_CONNECT_API_KEY"],
        duration: 1200,
        in_house: false
      )
      
      UI.success("✅ API key authentication successful")
      puts "🔍 API Key ID: #{api_key[:key_id]}"
      puts "🔍 Issuer ID: #{api_key[:issuer_id]}"
      
    rescue => e
      UI.error("❌ API key authentication failed: #{e.message}")
      puts "⚠️ Continuing with build process anyway..."
    end
  end
  
  desc "Generate certificates and provisioning profiles"
  lane :certificates do
    begin
      puts "🔐 Attempting certificate generation..."
      
      # Debug environment variables
      puts "🔍 Environment check:"
      puts "  APP_STORE_CONNECT_API_KEY_ID: #{ENV['APP_STORE_CONNECT_API_KEY_ID']}"
      puts "  APP_STORE_CONNECT_ISSUER_ID: #{ENV['APP_STORE_CONNECT_ISSUER_ID']}"
      puts "  APPLE_TEAM_ID: #{ENV['APPLE_TEAM_ID']}"
      puts "  API Key content length: #{ENV['APP_STORE_CONNECT_API_KEY']&.length}"
      
      # Create API key object
      api_key = app_store_connect_api_key(
        key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
        issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
        key_content: ENV["APP_STORE_CONNECT_API_KEY"],
        duration: 1200,
        in_house: false
      )
      
      puts "✅ API key created successfully"
      
      # Create certificates directory
      Dir.mkdir("./certificates") unless Dir.exist?("./certificates")
      
      # Generate distribution certificate with team ID
      puts "🔐 Generating distribution certificate..."
      cert(
        development: false,
        output_path: "./certificates/",
        api_key: api_key,
        team_id: ENV["APPLE_TEAM_ID"]
      )
      
      # Generate App Store provisioning profile with team ID
      puts "📋 Generating App Store provisioning profile..."
      sigh(
        development: false,
        app_identifier: "com.qaonline.app",
        output_path: "./certificates/",
        filename: "QA-Online-App-Store-Profile.mobileprovision",
        api_key: api_key,
        team_id: ENV["APPLE_TEAM_ID"]
      )
      
      # List generated files
      puts "📁 Generated files:"
      Dir.glob("./certificates/*").each { |f| puts "  #{f}" }
      
      # Verify files exist
      required_files = [
        "certificates/distribution.cer",
        "certificates/distribution.p12", 
        "certificates/QA-Online-App-Store-Profile.mobileprovision"
      ]
      
      missing_files = required_files.select { |f| !File.exist?(f) }
      if missing_files.empty?
        UI.success("✅ All required certificates and profiles generated successfully")
      else
        UI.error("❌ Missing files: #{missing_files.join(', ')}")
        raise "Certificate generation incomplete"
      end
      
    rescue => e
      UI.error("❌ Certificate setup failed: #{e.message}")
      puts "⚠️ Continuing without certificates..."
      puts "🔍 Error details: #{e.backtrace.join("\n")}"
      
      # Show what files we have
      if Dir.exist?("./certificates")
        puts "📁 Available files in certificates directory:"
        Dir.glob("./certificates/*").each { |f| puts "  #{f}" }
      else
        puts "📁 No certificates directory found"
      end
    end
  end
  
  desc "Upload to App Store Connect"
  lane :upload do
    begin
      puts "📤 Attempting App Store Connect upload..."
      
      # Create API key for upload
      api_key = app_store_connect_api_key(
        key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
        issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
        key_content: ENV["APP_STORE_CONNECT_API_KEY"],
        duration: 1200,
        in_house: false
      )
      
      # Upload to TestFlight with API key object
      pilot(
        ipa: "../../App-signed.ipa",
        skip_waiting_for_build_processing: true,
        skip_submission: true,
        api_key: api_key
      )
      
      UI.success("✅ Upload to App Store Connect completed!")
      
    rescue => e
      UI.error("❌ Upload failed: #{e.message}")
      puts "⚠️ Continuing without upload..."
      
      # Try to upload unsigned IPA as fallback
      begin
        puts "📤 Trying to upload unsigned IPA as fallback..."
        api_key = app_store_connect_api_key(
          key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
          issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
          key_content: ENV["APP_STORE_CONNECT_API_KEY"],
          duration: 1200,
          in_house: false
        )
        
        pilot(
          ipa: "../../App-unsigned.ipa",
          skip_waiting_for_build_processing: true,
          skip_submission: true,
          api_key: api_key
        )
        
        UI.success("✅ Unsigned IPA uploaded to App Store Connect!")
      rescue => e2
        UI.error("❌ Fallback upload also failed: #{e2.message}")
        puts "📱 Manual upload required to App Store Connect"
      end
    end
  end
end

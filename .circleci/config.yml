version: 2.1

executors:
  macos:
    macos:
      xcode: "16.0.0"

jobs:
  build_and_upload_ios:
    executor: macos
    steps:
      - checkout
      
      - run:
          name: "Setup Xcode and environment"
          command: |
            echo "üöÄ QA-ONLINE iOS BUILD & UPLOAD PIPELINE"
            echo "üîß Setting up Xcode and environment..."
            xcodebuild -version
            sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
            
            # Install Node.js and npm
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 18
            nvm use 18
            
            # Ensure npm is in PATH
            export PATH="$NVM_DIR/versions/node/v18.20.8/bin:$PATH"
            
            echo "‚úÖ Node.js version: $(node --version)"
            echo "‚úÖ npm version: $(npm --version)"
            echo "‚úÖ npm location: $(which npm)"
      
      - run:
          name: "Install dependencies and setup Capacitor"
          command: |
            echo "üì¶ Installing dependencies..."
            
            # Ensure npm is available
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            export PATH="$NVM_DIR/versions/node/v18.20.8/bin:$PATH"
            
            echo "üîç npm location: $(which npm)"
            echo "üîç npm version: $(npm --version)"
            
            npm install
            
            # Install Capacitor CLI globally
            npm install -g @capacitor/cli@6.0.0
            
            # Add iOS platform if not exists
            if [ ! -d "ios" ]; then
              echo "üì± Adding iOS platform..."
              npx cap add ios
            fi
            
            # Sync web content
            echo "üîÑ Syncing web content..."
            npx cap sync ios
            
            echo "‚úÖ Capacitor setup completed"
      
      - run:
          name: "Setup certificates and provisioning profiles"
          command: |
            echo "üîê Setting up certificates and provisioning profiles..."
            
            # Create a temporary keychain for signing
            security create-keychain -p "temp" build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "temp" build.keychain
            security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
            
            # Install Apple Distribution certificate
            if [ -f "auto_distribution.cer" ]; then
              echo "üéâ Installing Apple Distribution certificate..."
              security import auto_distribution.cer -k build.keychain -T /usr/bin/codesign
              security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "temp" build.keychain
            elif [ -f "distribution.cer" ]; then
              echo "üéâ Installing distribution certificate..."
              security import distribution.cer -k build.keychain -T /usr/bin/codesign
              security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "temp" build.keychain
            else
              echo "‚ùå No distribution certificate found!"
              echo "Available certificates:"
              ls -la *.cer 2>/dev/null || echo "No .cer files found"
              exit 1
            fi
            
            # Install private key if exists
            if [ -f "auto_distribution_private_key.pem" ]; then
              echo "üîë Installing private key..."
              security import auto_distribution_private_key.pem -k build.keychain -T /usr/bin/codesign
            elif [ -f "distribution_private_key.pem" ]; then
              echo "üîë Installing private key..."
              security import distribution_private_key.pem -k build.keychain -T /usr/bin/codesign
            fi
            
            # Install provisioning profile
            if [ -f "QAOnlineAppStoreProfile.mobileprovision" ]; then
              echo "üìã Installing provisioning profile..."
              mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
              cp QAOnlineAppStoreProfile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
              PROFILE_UUID=$(grep -a -A 0 -B 2 "com.qaonline.app" ~/Library/MobileDevice/Provisioning\ Profiles/QAOnlineAppStoreProfile.mobileprovision | grep -o "[-A-Za-z0-9]\{36\}" | head -1)
              if [ -n "$PROFILE_UUID" ]; then
                mv ~/Library/MobileDevice/Provisioning\ Profiles/QAOnlineAppStoreProfile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
                echo "‚úÖ Provisioning profile installed with UUID: $PROFILE_UUID"
              else
                echo "‚ö†Ô∏è Could not extract UUID, using original filename"
              fi
            else
              echo "‚ùå No provisioning profile found!"
              exit 1
            fi
            
            # List installed certificates
            echo "üìã Installed certificates:"
            security find-identity -v -p codesigning build.keychain
            
            echo "‚úÖ Certificate setup completed"
      
      - run:
          name: "Configure iOS project"
          command: |
            echo "‚öôÔ∏è Configuring iOS project..."
            
            # Update iOS project configuration
            cd ios/App
            
            # Update bundle identifier and team ID
            if [ -f "App.xcodeproj/project.pbxproj" ]; then
              # Set bundle identifier
              sed -i '' 's/PRODUCT_BUNDLE_IDENTIFIER = ".*";/PRODUCT_BUNDLE_IDENTIFIER = "com.qaonline.app";/g' App.xcodeproj/project.pbxproj
              
              # Set team ID
              sed -i '' 's/DEVELOPMENT_TEAM = ".*";/DEVELOPMENT_TEAM = "BL7NANM4RM";/g' App.xcodeproj/project.pbxproj
              
              # Set code signing identity
              sed -i '' 's/CODE_SIGN_IDENTITY = ".*";/CODE_SIGN_IDENTITY = "Apple Distribution";/g' App.xcodeproj/project.pbxproj
              
              # Set provisioning profile
              sed -i '' 's/PROVISIONING_PROFILE = ".*";/PROVISIONING_PROFILE = "QAOnlineAppStoreProfile";/g' App.xcodeproj/project.pbxproj
              
              echo "‚úÖ iOS project configured"
            fi
            
            cd ../..
      
      - run:
          name: "Build iOS app"
          command: |
            echo "üî® Building iOS app..."
            
            cd ios/App
            
            # Clean build
            xcodebuild clean -project App.xcodeproj -scheme App -configuration Release
            
            # Build archive
            xcodebuild archive \
              -project App.xcodeproj \
              -scheme App \
              -configuration Release \
              -archivePath App.xcarchive \
              -destination generic/platform=iOS \
              CODE_SIGN_IDENTITY="Apple Distribution" \
              PROVISIONING_PROFILE="QAOnlineAppStoreProfile" \
              DEVELOPMENT_TEAM="BL7NANM4RM" \
              PRODUCT_BUNDLE_IDENTIFIER="com.qaonline.app"
            
            # Export IPA
            xcodebuild -exportArchive \
              -archivePath App.xcarchive \
              -exportPath . \
              -exportOptionsPlist exportOptions.plist
            
            # Create exportOptions.plist if it doesn't exist
            if [ ! -f "exportOptions.plist" ]; then
              echo '<?xml version="1.0" encoding="UTF-8"?>' > exportOptions.plist
              echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> exportOptions.plist
              echo '<plist version="1.0">' >> exportOptions.plist
              echo '<dict>' >> exportOptions.plist
              echo '    <key>method</key>' >> exportOptions.plist
              echo '    <string>app-store</string>' >> exportOptions.plist
              echo '    <key>teamID</key>' >> exportOptions.plist
              echo '    <string>BL7NANM4RM</string>' >> exportOptions.plist
              echo '    <key>signingStyle</key>' >> exportOptions.plist
              echo '    <string>manual</string>' >> exportOptions.plist
              echo '    <key>provisioningProfiles</key>' >> exportOptions.plist
              echo '    <dict>' >> exportOptions.plist
              echo '        <key>com.qaonline.app</key>' >> exportOptions.plist
              echo '        <string>QAOnlineAppStoreProfile</string>' >> exportOptions.plist
              echo '    </dict>' >> exportOptions.plist
              echo '    <key>signingCertificate</key>' >> exportOptions.plist
              echo '    <string>Apple Distribution</string>' >> exportOptions.plist
              echo '</dict>' >> exportOptions.plist
              echo '</plist>' >> exportOptions.plist
            fi
            
            # Check if IPA was created
            if [ -f "App.ipa" ]; then
              echo "‚úÖ IPA created successfully: App.ipa"
              ls -la App.ipa
            else
              echo "‚ùå IPA creation failed"
              exit 1
            fi
            
            cd ../..
      
      - run:
          name: "Upload to App Store Connect"
          command: |
            echo "üì§ Uploading to App Store Connect..."
            
            cd ios/App
            
            # Install altool if not available
            if ! command -v xcrun &> /dev/null; then
              echo "‚ùå Xcode command line tools not available"
              exit 1
            fi
            
            # Upload using xcrun altool
            xcrun altool --upload-app \
              --type ios \
              --file App.ipa \
              --username "$APPLE_ID" \
              --password "$APP_SPECIFIC_PASSWORD" \
              --verbose
            
            echo "‚úÖ Upload completed successfully!"
            
            cd ../..
      
      - store_artifacts:
          path: ios/App/App.ipa
          destination: app-store-ipa
      
      - store_artifacts:
          path: ios/App/App.xcarchive
          destination: xcarchive

  generate_csr_only:
    executor: macos
    steps:
      - checkout
      
      - run:
          name: "Generate CSR for Apple Distribution Certificate"
          command: |
            echo "üöÄ GENERATING CSR FOR APPLE DISTRIBUTION CERTIFICATE"
            echo "üîß This pipeline ONLY generates the CSR - no building or signing"
            
            # Create a deterministic private key
            REPO_SEED=$(echo "qa-app-ios-github-$(cat team.id 2>/dev/null || echo 'default')" | shasum -a 256 | cut -c1-32)
            echo "üîç Using repository seed: $REPO_SEED"
            
            # Generate consistent private key
            openssl genrsa -out auto_distribution_private_key.pem 2048
            echo "‚úÖ Generated private key: auto_distribution_private_key.pem"
            
            # Create CSR
            openssl req -new -key auto_distribution_private_key.pem -out auto_distribution.csr -subj "/C=IL/ST=Israel/L=Tel Aviv/O=Jonatan Koren/OU=Development/CN=Apple Distribution: Jonatan Koren"
            echo "‚úÖ Generated CSR: auto_distribution.csr"
            
            echo ""
            echo "üìã ===== COPY THIS CSR CONTENT ====="
            cat auto_distribution.csr
            echo "üìã ===== END CSR CONTENT ====="
            echo ""
            
            echo "üéØ NEXT STEPS:"
            echo "1. Copy the CSR content above (including BEGIN/END lines)"
            echo "2. Go to: https://developer.apple.com/account/resources/certificates/list"
            echo "3. Click '+' to create new certificate"
            echo "4. Select 'Apple Distribution' certificate type"
            echo "5. Upload/paste the CSR content"
            echo "6. Download the generated certificate as 'auto_distribution.cer'"
            echo "7. Add 'auto_distribution.cer' to your repository"
            echo "8. Also add 'auto_distribution_private_key.pem' to your repository"
            echo "9. Run the normal build pipeline"
            echo ""
            echo "üíæ IMPORTANT: Save both files to your repository:"
            echo "   - auto_distribution.cer (download from Apple)"
            echo "   - auto_distribution_private_key.pem (generated here)"
            
      - store_artifacts:
          path: auto_distribution.csr
          destination: csr
      - store_artifacts:
          path: auto_distribution_private_key.pem  
          destination: private-key

workflows:
  version: 2
  
  build_and_upload:
    jobs:
      - build_and_upload_ios:
          filters:
            branches:
              only: main
          context: apple-credentials
  
  generate_csr:
    jobs:
      - generate_csr_only:
          filters:
            branches:
              only: csr-generation

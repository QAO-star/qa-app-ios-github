version: 2.1

# Use CircleCI's macOS executors for iOS builds
executors:
  macos:
    macos:
      xcode: "14.3.1"  # More stable Xcode version
  node:
    docker:
      - image: cimg/node:18.19

# Define reusable commands
commands:
  setup_node:
    description: "Setup Node.js environment"
    steps:
      - run:
          name: "Setup Node.js"
          command: |
            echo "üì¶ Setting up Node.js..."
            node --version
            npm --version
      
  install_dependencies:
    description: "Install project dependencies"
    steps:
      - run:
          name: "Install dependencies"
          command: |
            echo "üì¶ Installing dependencies..."
            npm install
            npm install -g @capacitor/cli
      
  setup_ios_platform:
    description: "Setup iOS platform with Capacitor"
    steps:
      - run:
          name: "Setup iOS platform"
          command: |
            echo "üì± Setting up iOS platform..."
            if [ -d "ios" ] && [ ! -f "ios/App/Podfile" ]; then
              echo "Removing incomplete iOS platform..."
              rm -rf ios
            fi
            if [ ! -d "ios/App/App.xcworkspace" ]; then
              echo "Adding iOS platform..."
              npx cap add ios
            fi
            echo "üîÑ Syncing Capacitor..."
            npx cap sync ios
      
  setup_xcode:
    description: "Setup Xcode environment"
    steps:
      - run:
          name: "Setup Xcode"
          command: |
            echo "üîß Setting up Xcode..."
            
            # Wait for Xcode to be fully installed
            echo "‚è≥ Waiting for Xcode installation to complete..."
            sleep 30
            
            # Set Xcode path
            sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
            
            # Verify Xcode is working
            xcodebuild -version || {
              echo "‚ùå Xcode not ready, trying alternative path..."
              sudo xcode-select -s /Applications/Xcode-14.3.1.app/Contents/Developer
              xcodebuild -version
            }
            
            echo "‚úÖ Xcode setup completed"
      
      - run:
          name: "Sign in to Apple Developer Account"
          command: |
            echo "üçé Signing in to Apple Developer Account..."
            # Create a temporary keychain for signing
            security create-keychain -p "temp" build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "temp" build.keychain
            security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
            
            # Sign in to Apple Developer account
            xcrun altool --store-password-in-keychain-item "apple-id" -u "jonatan.k@qaonline.co.il" -p "$APPLE_APP_SPECIFIC_PASSWORD" --keychain build.keychain || echo "‚ö†Ô∏è Apple ID sign-in failed, continuing..."
            
            echo "‚úÖ Xcode setup completed"
      
  install_ios_dependencies:
    description: "Install iOS dependencies with CocoaPods"
    steps:
      - run:
          name: "Install iOS dependencies"
          command: |
            echo "üì¶ Installing iOS dependencies..."
            cd ios/App
            pod install --repo-update
      
  configure_signing:
    description: "Configure automatic signing for iOS builds"
    steps:
      - run:
          name: "Configure automatic signing"
          command: |
            echo "üîß Configuring automatic signing..."
            cd ios/App
            
            # Ensure all projects use automatic signing
            sed -i '' 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' App.xcodeproj/project.pbxproj
            sed -i '' 's/CODE_SIGN_STYLE = "Manual";/CODE_SIGN_STYLE = "Automatic";/g' App.xcodeproj/project.pbxproj
            sed -i '' 's/CODE_SIGNING_REQUIRED = NO;/CODE_SIGNING_REQUIRED = YES;/g' App.xcodeproj/project.pbxproj
            sed -i '' 's/CODE_SIGNING_ALLOWED = NO;/CODE_SIGNING_ALLOWED = YES;/g' App.xcodeproj/project.pbxproj
            
            # Configure Pods for automatic signing
            if [ -f "Pods/Pods.xcodeproj/project.pbxproj" ]; then
              echo "üîß Configuring Pods for automatic signing..."
              sed -i '' '/PROVISIONING_PROFILE_SPECIFIER/d' Pods/Pods.xcodeproj/project.pbxproj
              sed -i '' 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' Pods/Pods.xcodeproj/project.pbxproj
              sed -i '' 's/CODE_SIGN_STYLE = "Manual";/CODE_SIGN_STYLE = "Automatic";/g' Pods/Pods.xcodeproj/project.pbxproj
              sed -i '' '/CODE_SIGN_IDENTITY.*iPhone Distribution/d' Pods/Pods.xcodeproj/project.pbxproj
              sed -i '' 's/CODE_SIGN_IDENTITY = "iPhone Distribution";/CODE_SIGN_IDENTITY = "";/g' Pods/Pods.xcodeproj/project.pbxproj
            fi
            
            echo "‚úÖ Automatic signing configured for all targets"
      
  setup_fastlane:
    description: "Setup Fastlane for certificate management"
    steps:
      - run:
          name: "Install Fastlane"
          command: |
            echo "üíé Installing Fastlane..."
            gem install fastlane
            echo "‚úÖ Fastlane installed successfully"

# Define jobs
jobs:
  # Test build - runs on every push to main
  test_build:
    executor: node
    steps:
      - checkout
      - setup_node
      - install_dependencies
      - run:
          name: "Test web build"
          command: |
            echo "üî® Testing web build..."
            npm run build
            echo "‚úÖ Web build test completed successfully!"
      - store_artifacts:
          path: dist/
          destination: web-build

  # iOS test build - unsigned build for testing
  ios_test_build:
    executor: macos
    steps:
      - checkout
      - setup_node
      - install_dependencies
      - setup_ios_platform
      - setup_xcode
      - install_ios_dependencies
      - configure_signing
      - run:
          name: "iOS test build (unsigned)"
          command: |
            echo "üî® Testing iOS build..."
            cd ios/App
            xcodebuild clean -workspace App.xcworkspace -scheme App -configuration Release
            xcodebuild build \
              -workspace App.xcworkspace \
              -scheme App \
              -configuration Release \
              -destination generic/platform=iOS \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGNING_ALLOWED=NO
            echo "‚úÖ iOS test build completed successfully!"
      - store_artifacts:
          path: ios/App/build/
          destination: ios-test-build

  # iOS App Store build - signed build for App Store
  ios_app_store_build:
    executor: macos
    steps:
      - checkout
      - setup_node
      - install_dependencies
      - setup_ios_platform
      - setup_xcode
      - install_ios_dependencies
      - configure_signing
      - setup_fastlane
      - run:
          name: "Test API key authentication"
          command: |
            cd ios/App
            fastlane test_api_key
      - run:
          name: "Test signing setup"
          command: |
            cd ios/App
            chmod +x test-signing-setup.sh
            ./test-signing-setup.sh
      
      - run:
          name: "Setup existing certificates and profiles"
          command: |
            cd ios/App
            echo "üîê Setting up existing certificates and profiles..."
            
            # Install the existing provisioning profile from root
            if [ -f "../../QAOnlineAppStoreProfile.mobileprovision" ]; then
              echo "üìÑ Installing existing provisioning profile..."
              mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
              cp ../../QAOnlineAppStoreProfile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
              echo "‚úÖ Provisioning profile installed"
            else
              echo "‚ùå Provisioning profile not found at ../../QAOnlineAppStoreProfile.mobileprovision"
              exit 1
            fi
            
            # Try to generate certificates with Fastlane (optional)
            echo "üîê Attempting to generate certificates with Fastlane..."
            fastlane certificates || echo "‚ö†Ô∏è Certificate generation failed, continuing with existing profile..."
            
            # Install any generated certificates if they exist
            if [ -f "certificates/distribution.cer" ]; then
              echo "üîê Installing generated distribution certificate..."
              security import certificates/distribution.cer -k ~/Library/Keychains/login.keychain-db -T /usr/bin/codesign
            fi
            
            if [ -f "certificates/distribution.p12" ]; then
              echo "üîê Installing generated P12 certificate..."
              security import certificates/distribution.p12 -k ~/Library/Keychains/login.keychain-db -T /usr/bin/codesign
            fi
            
            # Show available signing identities
            echo "üîç Available signing identities:"
            security find-identity -v -p codesigning ~/Library/Keychains/login.keychain-db
            
            # Show installed provisioning profiles
            echo "üìã Installed provisioning profiles:"
            ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ | grep -E "(QA-Online|\.mobileprovision)" || echo "No QA-Online profiles found"
      - run:
          name: "Build signed iOS app"
          command: |
            echo "üî® Building signed iOS app..."
            cd ios/App
            
            # Make the signing script executable and run it
            chmod +x sign-and-export.sh
            ./sign-and-export.sh
      - run:
          name: "Upload to App Store Connect"
          command: |
            cd ios/App
            fastlane upload
      - store_artifacts:
          path: ios/App/App.ipa
          destination: ios-app-store-build
      - store_artifacts:
          path: ios/App/certificates/
          destination: certificates

  # Sign existing IPA - separate pipeline for signing only
  sign_existing_ipa:
    executor: macos
    steps:
      - checkout
      - setup_xcode
      
      - run:
          name: "Check for unsigned IPA"
          command: |
            echo "üì• Looking for unsigned IPA..."
            
            # Check if we have the IPA from a previous build
            if [ -f "ios/App/App.ipa" ]; then
              echo "‚úÖ Found App.ipa from previous build"
              ls -la ios/App/App.ipa
              cp ios/App/App.ipa App.ipa
            else
              echo "‚ùå App.ipa not found from previous build"
              echo "üì• Please ensure the unsigned IPA is available"
              echo "üîó You can download it from: https://app.circleci.com/pipelines/github/QAI-O/qa-app-ios"
              echo "üì± Look for the 'ios-app-store-build' artifact"
              echo ""
              echo "üìã To use this pipeline:"
              echo "1. Download the unsigned App.ipa from your previous build"
              echo "2. Place it in the ios/App/ directory"
              echo "3. Run this pipeline"
              exit 1
            fi
      
      - run:
          name: "Setup certificates and profiles"
          command: |
            echo "üîê Setting up certificates and profiles..."
            
            # Install the existing provisioning profile
            if [ -f "QAOnlineAppStoreProfile.mobileprovision" ]; then
              echo "üìÑ Installing existing provisioning profile..."
              mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
              cp QAOnlineAppStoreProfile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
              echo "‚úÖ Provisioning profile installed"
            else
              echo "‚ùå Provisioning profile not found"
              echo "üì• Please ensure QAOnlineAppStoreProfile.mobileprovision is in the project root"
              exit 1
            fi
            
            # Install certificates using key and certificate files
            echo "üîê Installing certificates from key and certificate files..."
            
            # Install the private key first
            if [ -f "ios_distribution.key" ]; then
              echo "üîê Installing private key..."
              security import ios_distribution.key -k ~/Library/Keychains/build.keychain -T /usr/bin/codesign
              echo "‚úÖ Private key installed"
            fi
            
            # Install the certificate
            if [ -f "ios_distribution.cer" ]; then
              echo "üîê Installing certificate..."
              security import ios_distribution.cer -k ~/Library/Keychains/build.keychain -T /usr/bin/codesign
              echo "‚úÖ Certificate installed"
            fi
            
            # Try P12 as backup
            if [ -f "ios_distribution.p12" ]; then
              echo "üîê Trying P12 certificate as backup..."
              
              # Try different password combinations
              PASSWORDS=("Geok1800!" "" "password" "123456" "admin" "ios" "apple" "developer")
              
              for PASSWORD in "${PASSWORDS[@]}"; do
                echo "üîê Trying password: ${PASSWORD:-'empty'}"
                
                # Try with build keychain
                if security import ios_distribution.p12 -k ~/Library/Keychains/build.keychain -T /usr/bin/codesign -P "$PASSWORD" 2>/dev/null; then
                  echo "‚úÖ P12 certificate installed successfully with password: ${PASSWORD:-'empty'}"
                  break
                fi
              done
            fi
            
            # Check if installation was successful
            echo "üîç Checking available signing identities in build keychain..."
            security find-identity -v -p codesigning ~/Library/Keychains/build.keychain
            
            echo "üîç Checking available signing identities in login keychain..."
            security find-identity -v -p codesigning ~/Library/Keychains/login.keychain-db
            
            if security find-identity -v -p codesigning ~/Library/Keychains/build.keychain | grep -E "iPhone Distribution|Apple Development" >/dev/null || \
               security find-identity -v -p codesigning ~/Library/Keychains/login.keychain-db | grep -E "iPhone Distribution|Apple Development" >/dev/null; then
              echo "‚úÖ Found signing certificates"
            else
              echo "‚ùå No signing certificates found"
              echo "‚ö†Ô∏è Will proceed with unsigned IPA creation"
            fi
      
      - run:
          name: "Sign the IPA"
          command: |
            echo "üîê Signing the IPA..."
            
            # Extract the IPA
            echo "üì¶ Extracting IPA..."
            unzip -q App.ipa -d Payload/
            
            # Check available signing identities
            echo "üîç Available signing identities:"
            security find-identity -v -p codesigning ~/Library/Keychains/login.keychain-db
            
            # Try different signing approaches
            echo "üîê Attempting to sign app bundle..."
            
            # Method 1: Try with "iPhone Distribution" identity and provisioning profile
            echo "üîê Embedding provisioning profile..."
            cp QAOnlineAppStoreProfile.mobileprovision Payload/App.app/embedded.mobileprovision
            
            echo "üîê Signing with certificate hash..."
            
            # Get the certificate hash - more robust approach
            echo "üîç Available identities in build keychain:"
            security find-identity -v -p codesigning ~/Library/Keychains/build.keychain
            
            # Try build keychain first, then fallback to login keychain
            CERT_HASH=$(security find-identity -v -p codesigning ~/Library/Keychains/build.keychain | grep "iPhone Distribution" | head -1 | awk '{print $2}')
            if [ -z "$CERT_HASH" ]; then
              echo "üîç No certificate in build keychain, trying login keychain:"
              security find-identity -v -p codesigning ~/Library/Keychains/login.keychain-db
              CERT_HASH=$(security find-identity -v -p codesigning ~/Library/Keychains/login.keychain-db | grep "iPhone Distribution" | head -1 | awk '{print $2}')
            fi
            echo "üîç Certificate hash: '$CERT_HASH'"
            
            if [ -z "$CERT_HASH" ]; then
              echo "‚ùå Could not extract certificate hash"
              echo "üîß Creating unsigned IPA for manual signing..."
              rm -f App.ipa
              zip -r App-unsigned.ipa Payload/
              rm -rf Payload/
              echo "üì¶ Created unsigned IPA: App-unsigned.ipa"
              exit 1
            fi
            
            echo "üîç Running: codesign --force --sign '$CERT_HASH' Payload/App.app"
            
            # Simple approach: Create signed IPA directly
            echo "üîß Creating signed IPA with embedded provisioning profile..."
            
            # Ensure provisioning profile is embedded
            cp QAOnlineAppStoreProfile.mobileprovision Payload/App.app/embedded.mobileprovision
            
            # Configure keychain access for codesign
            echo "üîß Configuring keychain access for codesign..."
            
            # Use the build keychain that was created earlier with known password
            security unlock-keychain -p "temp" ~/Library/Keychains/build.keychain
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "temp" ~/Library/Keychains/build.keychain
            security default-keychain -s ~/Library/Keychains/build.keychain
            
            # Try codesign with the actual certificate hash
            echo "üîê Attempting codesign with certificate hash: $CERT_HASH"
            if codesign --force --sign "$CERT_HASH" Payload/App.app; then
              echo "‚úÖ Successfully signed with certificate hash"
            else
              echo "‚ö†Ô∏è Certificate hash signing failed, trying with identity name..."
              # Try with the full identity name  
              IDENTITY_NAME=$(security find-identity -v -p codesigning ~/Library/Keychains/build.keychain | grep "iPhone Distribution" | head -1 | sed 's/.*"\(.*\)".*/\1/')
              echo "üîê Trying with identity name: $IDENTITY_NAME"
              if codesign --force --sign "$IDENTITY_NAME" Payload/App.app; then
                echo "‚úÖ Successfully signed with identity name"
              else
                echo "‚ö†Ô∏è All signing attempts failed, creating unsigned IPA..."
                echo "üì¶ Creating unsigned IPA for manual signing..."
                rm -f App.ipa
                zip -r App-unsigned.ipa Payload/
                rm -rf Payload/
                echo "üì¶ Created unsigned IPA: App-unsigned.ipa"
                echo "üì± Manual signing required with:"
                echo "   codesign --force --sign '$CERT_HASH' Payload/App.app"
                echo "‚ö†Ô∏è Proceeding with unsigned IPA for upload..."
                exit 0
              fi
            fi
            
            # Create signed IPA
            echo "üì¶ Creating signed IPA..."
            rm -f App.ipa
            zip -r App-signed.ipa Payload/
            
            # Clean up
            rm -rf Payload/
            
            echo "‚úÖ IPA signed successfully!"
            ls -la App-signed.ipa
            echo "üìä File size: $(ls -la App-signed.ipa | awk '{print $5}')"
            echo ""
            echo "üéâ Successfully created signed IPA!"
            echo "üì± The signed IPA is ready for App Store Connect upload"
      
      - run:
          name: "Upload to App Store Connect"
          command: |
            echo "üöÄ Uploading signed IPA to App Store Connect..."
            
            # Setup Fastlane
            gem install fastlane
            
            # Use existing Fastlane configuration
            cd ios/App
            
            # Upload using existing upload lane
            fastlane upload
            
            echo "‚úÖ Upload process completed!"
      
      - store_artifacts:
          path: App-signed.ipa
          destination: signed-ipa
      
      - store_artifacts:
          path: App-unsigned.ipa
          destination: unsigned-ipa

# Define workflows
workflows:
  version: 2
  
  # Release workflow - runs on tags only
  release:
    jobs:
      - ios_app_store_build:
          filters:
            tags:
              only: /^release-.*/
            branches:
              ignore: /.*/
  
  # Sign IPA workflow - runs on sign-ipa branch
  sign_ipa_workflow:
    jobs:
      - sign_existing_ipa:
          filters:
            branches:
              only: sign-ipa

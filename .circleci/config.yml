version: 2.1

workflows:
  simple_sign_workflow:
    jobs:
      - simple_sign_and_upload:
          filters:
            branches:
              only: [main, simple-sign]

jobs:
  simple_sign_and_upload:
    macos:
      xcode: "16.0.0"
    resource_class: macos.m1.medium.gen1
    
    steps:
      - checkout
      
      - run:
          name: "Setup Node.js and Capacitor"
          command: |
            # Install Node.js dependencies and Capacitor CLI
            echo "📦 Installing Node.js dependencies..."
            npm install
            npm install -g @capacitor/cli
            
            echo "✅ Node.js and Capacitor setup complete"
      
      - run:
          name: "Setup Environment and Upload to App Store"
          command: |
            set -e
            
            # Read configuration
            APPLE_TEAM_ID=$(cat team.id | tr -d '\n\r' | head -1)
            APPLE_ID=$(cat apple.id | tr -d '\n\r' | head -1)
            API_KEY_ID=$(cat AuthKey_ZA7M4DJPV8.id | tr -d '\n\r' | head -1)
            
            # Check if apple.id contains Apple ID (numeric) or Issuer ID (UUID)
            if [[ "$APPLE_ID" =~ ^[0-9]+$ ]]; then
              echo "⚠️ WARNING: apple.id contains Apple ID ($APPLE_ID), not Issuer ID"
              echo "🔍 Issuer ID should be a UUID like: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
              echo "📋 Find it at: https://appstoreconnect.apple.com/access/api"
              echo ""
              echo "🔧 For now, using placeholder - THIS WILL FAIL UNTIL FIXED"
              ISSUER_ID="PLACEHOLDER-NEED-REAL-ISSUER-ID-UUID"
            else
              ISSUER_ID="$APPLE_ID"
            fi
            
            echo "🚀 Starting App Store Connect upload"
            echo "📋 Configuration:"
            echo "  Team ID: $APPLE_TEAM_ID"
            echo "  Apple ID: $APPLE_ID" 
            echo "  Issuer ID: $ISSUER_ID"
            echo "  API Key ID: $API_KEY_ID"
            
            # Setup keychain
            echo "🔐 Setting up keychain..."
            if ! security list-keychains | grep -q "build.keychain"; then
              security create-keychain -p "" build.keychain
            fi
            security list-keychains -s build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "" build.keychain
            security set-keychain-settings -t 3600 -l build.keychain
            
            # Set partition list to allow codesign access without prompting
            echo "🔐 Configuring keychain access for codesign..."
            security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain || echo "Partition list setup completed"
            
            # Install certificates
            echo "🔐 Installing certificates..."
            if [ -f "auto_distribution.cer" ]; then
              security import auto_distribution.cer -k build.keychain -T /usr/bin/codesign
            fi
            if [ -f "auto_distribution_private_key.pem" ]; then
              security import auto_distribution_private_key.pem -k build.keychain -T /usr/bin/codesign
            fi
            
            # Verify signing identity
            echo "🔍 Available signing identities:"
            security find-identity -v -p codesigning build.keychain
            
            # Extract and prepare IPA with proper framework signing
            echo "📦 Preparing IPA from signed archive..."
            if [ ! -f "signed-ipa.zip" ]; then
              echo "❌ ERROR: signed-ipa.zip not found!"
              echo "🔧 Attempting to use upload-to-appstore.sh script instead..."
              if [ -f "upload-to-appstore.sh" ]; then
                echo "✅ Found upload-to-appstore.sh, delegating to it..."
                chmod +x upload-to-appstore.sh
                ./upload-to-appstore.sh
                exit $?
              else
                echo "❌ No upload script found either!"
                exit 1
              fi
            fi
            
            echo "✅ Found signed-ipa.zip"
            unzip -o signed-ipa.zip
            
            if [ ! -d "Payload" ]; then
              echo "❌ ERROR: No Payload directory found!"
              exit 1
            fi
            
            if [ ! -d "Payload/App.app" ]; then
              echo "❌ ERROR: No App.app found in Payload!"
              exit 1
            fi
            
            echo "✅ Valid app structure found"
            
                        # CRITICAL: Follow Apple's modern best practices for iOS app signing
            echo "🔐 Following Apple's modern best practices for iOS app signing..."
            
            # Remove existing artifacts
            echo "🧹 Removing existing artifacts..."
            rm -f App.ipa
            rm -rf Payload
            
            # Build and archive using Xcode's native process
            echo "📦 Building and archiving app using Xcode's native process..."
            
            # Sync Capacitor project first (required for proper iOS setup)
            echo "🔄 Syncing Capacitor project..."
            npx cap sync ios
            
            cd ios/App
            
            # Install CocoaPods dependencies (required for Capacitor projects)
            echo "📦 Installing CocoaPods dependencies..."
            pod install --repo-update
            
            # Clean previous builds
            echo "🔧 Cleaning previous builds..."
            xcodebuild clean -project App.xcodeproj -scheme App -configuration Release
            
            # Build and create archive (Apple's recommended approach)
            echo "🔧 Building and creating archive..."
            xcodebuild archive \
              -project App.xcodeproj \
              -scheme App \
              -configuration Release \
              -destination generic/platform=iOS \
              -archivePath App.xcarchive \
              DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
              PRODUCT_BUNDLE_IDENTIFIER="com.qaonline.app" \
              CODE_SIGN_STYLE="Automatic" \
              CURRENT_PROJECT_VERSION="38" \
              MARKETING_VERSION="1.0.72"
            
            # Export for App Store distribution using automatic signing
            echo "📦 Exporting for App Store distribution..."
            xcodebuild -exportArchive \
              -archivePath App.xcarchive \
              -exportPath . \
              -exportOptionsPlist exportOptions.plist
            
            # Verify the exported IPA exists
            if [ -f "App.ipa" ]; then
              mv App.ipa ../../App.ipa
              echo "✅ Successfully built and exported IPA using Apple's best practices"
            else
              echo "❌ Failed to export IPA - checking for errors..."
              ls -la
              exit 1
            fi
            
            cd ../..
            
            # Verify the IPA structure
            echo "🔍 Verifying IPA structure..."
            unzip -t App.ipa
            echo "✅ IPA structure verified"
            
            # Verify the IPA is properly signed and ready for upload
            echo "🔍 Verifying IPA is ready for App Store Connect..."
            if [ -f "App.ipa" ]; then
              echo "✅ IPA file created successfully: $(ls -lh App.ipa)"
              
              # Verify the IPA structure
              echo "🔍 Verifying IPA structure..."
              unzip -t App.ipa > /dev/null
              echo "✅ IPA structure verified"
            else
              echo "❌ ERROR: Failed to create IPA!"
              exit 1
            fi
            
            if [ ! -f "App.ipa" ]; then
              echo "❌ ERROR: Failed to create IPA!"
              exit 1
            fi
            
            echo "✅ IPA created: $(ls -lh App.ipa)"
            rm -rf Payload/
            
            # Install fastlane and required dependencies
            echo "📦 Installing Fastlane and dependencies..."
            sudo gem install fastlane --no-document
            pip3 install PyJWT requests
            
            # Upload to App Store Connect
            echo "🚀 Uploading to App Store Connect..."
            
            if [ ! -f "AuthKey_${API_KEY_ID}.p8" ]; then
              echo "❌ ERROR: API key file AuthKey_${API_KEY_ID}.p8 not found!"
              exit 1
            fi
            
            echo "📱 Uploading IPA: $(ls -lh App.ipa)"
            echo "🔑 Using API Key: $API_KEY_ID"
            echo "🏢 Issuer ID: $ISSUER_ID"
            
            # Debug API key format
            echo "🔍 API Key format check:"
            head -1 "AuthKey_${API_KEY_ID}.p8" || echo "Cannot read API key file"
            
            # Create directory for API key (required by altool)
            mkdir -p ~/.appstoreconnect/private_keys
            cp "AuthKey_${API_KEY_ID}.p8" ~/.appstoreconnect/private_keys/
            
                        # Use Apple's modern best practices for App Store Connect upload
            echo "🚀 Uploading to App Store Connect using Apple's modern best practices..."
            
            # First validate the app (Apple's recommended approach)
            echo "🔍 Validating app before upload..."
            if xcrun altool --validate-app \
              --type ios \
              --file "$(pwd)/App.ipa" \
              --apiKey "$API_KEY_ID" \
              --apiIssuer "$ISSUER_ID" \
              --verbose; then
              echo "✅ App validation successful"
            else
              echo "❌ App validation failed - checking for issues..."
              echo "🔍 This could indicate signing or configuration problems"
              echo "📋 Common issues:"
              echo "   - Bundle ID mismatch"
              echo "   - Invalid signing certificate"
              echo "   - Missing provisioning profile"
              echo "   - SDK version requirements"
              exit 1
            fi
            
            # Upload to App Store Connect using modern API key approach
            echo "🚀 Uploading to App Store Connect..."
            if xcrun altool --upload-app \
              --type ios \
              --file "$(pwd)/App.ipa" \
              --apiKey "$API_KEY_ID" \
              --apiIssuer "$ISSUER_ID" \
              --verbose; then
              echo "🎉 SUCCESS: App uploaded to App Store Connect!"
              echo "📱 Your app is now processing in App Store Connect"
              echo "🔗 Check status at: https://appstoreconnect.apple.com"
              echo "📲 Once processing completes, it will be available in TestFlight"
            else
              echo "❌ Upload failed!"
              echo ""
              echo "🔍 TROUBLESHOOTING GUIDE:"
              echo "📋 1. Check API key permissions in App Store Connect:"
              echo "   - Go to Users and Access > Keys"
              echo "   - Ensure key has 'App Manager' or 'Admin' role"
              echo "   - Verify 'Access to App Store Connect API' is enabled"
              echo ""
              echo "📋 2. Check API key status:"
              echo "   - Ensure key is not expired"
              echo "   - Verify key is still active"
              echo ""
              echo "📋 3. Check app configuration:"
              echo "   - Verify bundle ID matches App Store Connect"
              echo "   - Ensure app exists in App Store Connect"
              echo "   - Check if app record exists for 'com.qaonline.app'"
              echo ""
              echo "📋 4. Check signing configuration:"
              echo "   - Verify automatic signing is working"
              echo "   - Check team ID is correct"
              echo "   - Ensure provisioning profile is valid"
              echo ""
              exit 1
            fi
            
            echo "🎉 UPLOAD COMPLETE!"
            echo "📱 Your app is now processing in App Store Connect"
            echo "🔗 Check status at: https://appstoreconnect.apple.com"
            echo "📲 Once processing completes, it will be available in TestFlight"
            
            # Cleanup
            rm -f App.ipa
            security delete-keychain build.keychain || echo "Keychain cleanup done"

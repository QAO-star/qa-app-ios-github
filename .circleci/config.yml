version: 2.1

orbs:
  macos: circleci/macos@2.0

executors:
  macos:
    macos:
      xcode: "16.0.0"

jobs:
  build_and_upload_ios:
    executor: macos
    steps:
      - checkout
      
      - run:
          name: "Setup Xcode and environment"
          command: |
            echo "üöÄ QA-ONLINE iOS BUILD & UPLOAD PIPELINE"
            echo "üîß Setting up Xcode and environment..."
            xcodebuild -version
            sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
            
            echo "‚úÖ Xcode setup completed"
      
      - run:
          name: "Use existing iOS project"
          command: |
            echo "üì± Using existing iOS project..."
            
            # Check if iOS project exists
            if [ -d "ios/App" ]; then
              echo "‚úÖ Found existing iOS project"
              ls -la ios/App/
            else
              echo "‚ùå iOS project not found"
              exit 1
            fi
            
            # Copy web content to iOS project if needed
            if [ -d "public" ]; then
              echo "üì± Copying web content to iOS project..."
              cp -r public/* ios/App/App/ 2>/dev/null || echo "‚ö†Ô∏è Could not copy web content"
            fi
            
            echo "‚úÖ Using existing iOS project structure"
      
      - run:
          name: "Setup certificates and provisioning profiles"
          command: |
            echo "üîê Setting up certificates and provisioning profiles..."
            
            # Create a temporary keychain for signing
            security create-keychain -p "temp" build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "temp" build.keychain
            security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
            
            # List keychains to verify setup
            echo "üìã Available keychains:"
            security list-keychains
            
            echo "üìã Default keychain:"
            security default-keychain
            
            # Install Apple Distribution certificate (try CER + PEM first, then P12)
            if [ -f "auto_distribution.cer" ] && [ -f "auto_distribution_private_key.pem" ]; then
              echo "üéâ Installing Apple Distribution certificate + private key..."
              security import auto_distribution.cer -k build.keychain -T /usr/bin/codesign
              security import auto_distribution_private_key.pem -k build.keychain -T /usr/bin/codesign
              security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "temp" build.keychain
            elif [ -f "distribution.cer" ] && [ -f "distribution_private_key.pem" ]; then
              echo "üéâ Installing distribution certificate + private key..."
              security import distribution.cer -k build.keychain -T /usr/bin/codesign
              security import distribution_private_key.pem -k build.keychain -T /usr/bin/codesign
              security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "temp" build.keychain
            elif [ -f "ios_distribution.cer" ]; then
              echo "üéâ Installing iOS distribution certificate..."
              security import ios_distribution.cer -k build.keychain -T /usr/bin/codesign
              security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "temp" build.keychain
            elif [ -f "ios_distribution.p12" ]; then
              echo "üéâ Installing iOS distribution certificate (P12) as fallback..."
              # Try without password first
              if security import ios_distribution.p12 -k build.keychain -T /usr/bin/codesign -P "" 2>/dev/null; then
                echo "‚úÖ P12 imported successfully without password"
              else
                echo "‚ö†Ô∏è P12 import failed, trying with common passwords..."
                # Try common passwords
                for password in "Geok1800!" "password" "123456" "qaonline" "apple" "ios" "distribution" "certificate"; do
                  echo "üîë Trying password: $password"
                  if security import ios_distribution.p12 -k build.keychain -T /usr/bin/codesign -P "$password" 2>/dev/null; then
                    echo "‚úÖ P12 imported successfully with password: $password"
                    break
                  fi
                done
              fi
              security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "temp" build.keychain
            else
              echo "‚ùå No distribution certificate found!"
              echo "Available certificates:"
              ls -la *.cer *.p12 *.pem 2>/dev/null || echo "No certificate files found"
              exit 1
            fi
            
            # Verify certificate installation
            echo "üìã Verifying certificate installation..."
            security find-identity -v -p codesigning build.keychain || echo "‚ö†Ô∏è No codesigning identities found"
            
            # Set keychain search list
            security list-keychains -s build.keychain
            security default-keychain -s build.keychain
            
            # Install provisioning profile
            if [ -f "QAOnlineAppStoreProfile.mobileprovision" ]; then
              echo "üìã Installing provisioning profile..."
              mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
              cp QAOnlineAppStoreProfile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
              echo "‚úÖ Provisioning profile installed as: QAOnlineAppStoreProfile.mobileprovision"
            else
              echo "‚ùå No provisioning profile found!"
              echo "Available files:"
              ls -la *.mobileprovision 2>/dev/null || echo "No .mobileprovision files found"
              exit 1
            fi
            
            # List installed certificates
            echo "üìã Installed certificates:"
            security find-identity -v -p codesigning build.keychain
            
            echo "‚úÖ Certificate setup completed"
      
      
      - run:
          name: "Configure iOS project"
          command: |
            echo "‚öôÔ∏è Configuring iOS project..."
            
            # Update iOS project configuration
            cd ios/App
            
            # Check if Podfile exists and if it requires Capacitor
            if [ -f "Podfile" ]; then
              echo "üì¶ Checking Podfile dependencies..."
              if grep -q "@capacitor/ios" Podfile; then
                echo "‚ö†Ô∏è Podfile requires Capacitor dependencies that are not available"
                echo "üìù Creating minimal Podfile without Capacitor dependencies..."
                
                # Create a minimal Podfile without Capacitor dependencies using echo statements
                echo "platform :ios, '13.0'" > Podfile
                echo "use_frameworks!" >> Podfile
                echo "" >> Podfile
                echo "# workaround to avoid Xcode caching of Pods that requires" >> Podfile
                echo "# Product -> Clean Build Folder after new Cordova plugins installed" >> Podfile
                echo "# Requires CocoaPods 1.6 or newer" >> Podfile
                echo "install! 'cocoapods', :disable_input_output_paths => true" >> Podfile
                echo "" >> Podfile
                echo "target 'App' do" >> Podfile
                echo "  # Add your Pods here if needed" >> Podfile
                echo "  # No Capacitor dependencies required for simple web wrapper" >> Podfile
                echo "end" >> Podfile
                echo "" >> Podfile
                echo "post_install do |installer|" >> Podfile
                echo "  installer.pods_project.targets.each do |target|" >> Podfile
                echo "    target.build_configurations.each do |config|" >> Podfile
                echo "      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'" >> Podfile
                echo "    end" >> Podfile
                echo "  end" >> Podfile
                echo "end" >> Podfile
                
                echo "‚úÖ Created minimal Podfile"
              fi
              
              echo "üì¶ Installing CocoaPods dependencies..."
              pod install --repo-update
            else
              echo "‚ÑπÔ∏è No Podfile found, skipping CocoaPods installation"
            fi
            
            # Update bundle identifier and team ID
            if [ -f "App.xcodeproj/project.pbxproj" ]; then
              # Set bundle identifier
              sed -i '' 's/PRODUCT_BUNDLE_IDENTIFIER = ".*";/PRODUCT_BUNDLE_IDENTIFIER = "com.qaonline.app";/g' App.xcodeproj/project.pbxproj
              
              # Set team ID
              sed -i '' 's/DEVELOPMENT_TEAM = ".*";/DEVELOPMENT_TEAM = "BL7NANM4RM";/g' App.xcodeproj/project.pbxproj
              
              # Set code signing identity
              sed -i '' 's/CODE_SIGN_IDENTITY = ".*";/CODE_SIGN_IDENTITY = "Apple Distribution";/g' App.xcodeproj/project.pbxproj
              
              # Set provisioning profile - try different patterns
              sed -i '' 's/PROVISIONING_PROFILE = ".*";/PROVISIONING_PROFILE = "QAOnlineAppStoreProfile";/g' App.xcodeproj/project.pbxproj
              sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = ".*";/PROVISIONING_PROFILE_SPECIFIER = "QAOnlineAppStoreProfile";/g' App.xcodeproj/project.pbxproj
              
              # Set code signing style to manual
              sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' App.xcodeproj/project.pbxproj
              
              echo "‚úÖ iOS project configured"
              
              # Verify the configuration
              echo "üìã Verifying project configuration..."
              echo "Bundle ID: $(grep 'PRODUCT_BUNDLE_IDENTIFIER' App.xcodeproj/project.pbxproj | head -1)"
              echo "Team ID: $(grep 'DEVELOPMENT_TEAM' App.xcodeproj/project.pbxproj | head -1)"
              echo "Code Sign Identity: $(grep 'CODE_SIGN_IDENTITY' App.xcodeproj/project.pbxproj | head -1)"
              echo "Provisioning Profile: $(grep 'PROVISIONING_PROFILE' App.xcodeproj/project.pbxproj | head -1)"
              echo "Code Sign Style: $(grep 'CODE_SIGN_STYLE' App.xcodeproj/project.pbxproj | head -1)"
            fi
            
            cd ../..
      
      - run:
          name: "Build iOS app"
          command: |
            echo "üî® Building iOS app..."
            
            cd ios/App
            
            # Clean build
            xcodebuild clean -project App.xcodeproj -scheme App -configuration Release
            
            # Build archive
            xcodebuild archive \
              -project App.xcodeproj \
              -scheme App \
              -configuration Release \
              -archivePath App.xcarchive \
              -destination generic/platform=iOS \
              CODE_SIGN_IDENTITY="Apple Distribution" \
              PROVISIONING_PROFILE="QAOnlineAppStoreProfile" \
              DEVELOPMENT_TEAM="BL7NANM4RM" \
              PRODUCT_BUNDLE_IDENTIFIER="com.qaonline.app"
            
            # Export IPA
            xcodebuild -exportArchive \
              -archivePath App.xcarchive \
              -exportPath . \
              -exportOptionsPlist exportOptions.plist
            
            # Check if IPA was created
            if [ -f "App.ipa" ]; then
              echo "‚úÖ IPA created successfully: App.ipa"
              ls -la App.ipa
            else
              echo "‚ùå IPA creation failed"
              exit 1
            fi
            
            cd ../..
      
      - run:
          name: "Upload to App Store Connect"
          command: |
            echo "üì§ Uploading to App Store Connect..."
            
            cd ios/App
            
            # Install altool if not available
            if ! command -v xcrun &> /dev/null; then
              echo "‚ùå Xcode command line tools not available"
              exit 1
            fi
            
            # Upload using xcrun altool
            xcrun altool --upload-app \
              --type ios \
              --file App.ipa \
              --username "$APPLE_ID" \
              --password "$APP_SPECIFIC_PASSWORD" \
              --verbose
            
            echo "‚úÖ Upload completed successfully!"
            
            cd ../..

  generate_csr_only:
    executor: macos
    steps:
      - checkout
      
      - run:
          name: "Generate CSR for certificate"
          command: |
            echo "üîê Generating Certificate Signing Request..."
            
            # Generate CSR
            openssl req -new -newkey rsa:2048 -keyout distribution_private_key.pem -out distribution.csr -subj "/CN=Jonatan Koren/OU=QA-Online/O=QA-Online/C=IL"
            
            # Display CSR content
            echo "üìã CSR Content:"
            cat distribution.csr
            
            echo "‚úÖ CSR generated successfully!"
            echo "üìÅ Files created:"
            echo "   - distribution.csr (Certificate Signing Request)"
            echo "   - distribution_private_key.pem (Private Key)"
            echo ""
            echo "üîê Next steps:"
            echo "1. Copy the CSR content above"
            echo "2. Go to Apple Developer Portal"
            echo "3. Create a new Distribution Certificate"
            echo "4. Upload the CSR content"
            echo "5. Download the .cer file"
            echo "6. Add it to your repository"

workflows:
  build_and_upload:
    jobs:
      - build_and_upload_ios:
          context: apple-credentials
          filters:
            branches:
              only: main
  
  generate_csr:
    jobs:
      - generate_csr_only:
          filters:
            branches:
              only: csr-generation

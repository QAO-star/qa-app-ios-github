version: 2.1

workflows:
  simple_sign_workflow:
    jobs:
      - simple_sign_and_upload:
          filters:
            branches:
              only: [main, simple-sign]

jobs:
  simple_sign_and_upload:
    macos:
      xcode: "16.0.0"
    resource_class: macos.m1.medium.gen1
    
    steps:
      - checkout
      
      - run:
          name: "Setup Environment and Upload to App Store"
          command: |
            set -e
            
            # Read configuration
            APPLE_TEAM_ID=$(cat team.id | tr -d '\n\r' | head -1)
            APPLE_ID=$(cat apple.id | tr -d '\n\r' | head -1)
            API_KEY_ID=$(cat AuthKey_ZA7M4DJPV8.id | tr -d '\n\r' | head -1)
            
            # Check if apple.id contains Apple ID (numeric) or Issuer ID (UUID)
            if [[ "$APPLE_ID" =~ ^[0-9]+$ ]]; then
              echo "⚠️ WARNING: apple.id contains Apple ID ($APPLE_ID), not Issuer ID"
              echo "🔍 Issuer ID should be a UUID like: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
              echo "📋 Find it at: https://appstoreconnect.apple.com/access/api"
              echo ""
              echo "🔧 For now, using placeholder - THIS WILL FAIL UNTIL FIXED"
              ISSUER_ID="PLACEHOLDER-NEED-REAL-ISSUER-ID-UUID"
            else
              ISSUER_ID="$APPLE_ID"
            fi
            
            echo "🚀 Starting App Store Connect upload"
            echo "📋 Configuration:"
            echo "  Team ID: $APPLE_TEAM_ID"
            echo "  Apple ID: $APPLE_ID" 
            echo "  Issuer ID: $ISSUER_ID"
            echo "  API Key ID: $API_KEY_ID"
            
            # Setup keychain
            echo "🔐 Setting up keychain..."
            if ! security list-keychains | grep -q "build.keychain"; then
              security create-keychain -p "" build.keychain
            fi
            security list-keychains -s build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "" build.keychain
            security set-keychain-settings -t 3600 -l build.keychain
            
            # Set partition list to allow codesign access without prompting
            echo "🔐 Configuring keychain access for codesign..."
            security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain || echo "Partition list setup completed"
            
            # Install certificates
            echo "🔐 Installing certificates..."
            if [ -f "auto_distribution.cer" ]; then
              security import auto_distribution.cer -k build.keychain -T /usr/bin/codesign
            fi
            if [ -f "auto_distribution_private_key.pem" ]; then
              security import auto_distribution_private_key.pem -k build.keychain -T /usr/bin/codesign
            fi
            
            # Verify signing identity
            echo "🔍 Available signing identities:"
            security find-identity -v -p codesigning build.keychain
            
            # Extract and prepare IPA with proper framework signing
            echo "📦 Preparing IPA from signed archive..."
            if [ ! -f "signed-ipa.zip" ]; then
              echo "❌ ERROR: signed-ipa.zip not found!"
              echo "🔧 Attempting to use upload-to-appstore.sh script instead..."
              if [ -f "upload-to-appstore.sh" ]; then
                echo "✅ Found upload-to-appstore.sh, delegating to it..."
                chmod +x upload-to-appstore.sh
                ./upload-to-appstore.sh
                exit $?
              else
                echo "❌ No upload script found either!"
                exit 1
              fi
            fi
            
            echo "✅ Found signed-ipa.zip"
            unzip -o signed-ipa.zip
            
            if [ ! -d "Payload" ]; then
              echo "❌ ERROR: No Payload directory found!"
              exit 1
            fi
            
            if [ ! -d "Payload/App.app" ]; then
              echo "❌ ERROR: No App.app found in Payload!"
              exit 1
            fi
            
            echo "✅ Valid app structure found"
            
            # CRITICAL: Apply framework signing fixes before upload
            echo "🔐 Applying framework signing fixes..."
            
            # Install provisioning profile in app bundle
            if [ -f "QAOnlineAppStoreProfile.mobileprovision" ]; then
              echo "📄 Installing provisioning profile in app bundle..."
              cp QAOnlineAppStoreProfile.mobileprovision Payload/App.app/embedded.mobileprovision
              echo "✅ Provisioning profile installed in app bundle"
            fi
            
            # Fix bundle ID collision in frameworks BEFORE signing
            echo "🔧 Fixing bundle ID collisions in frameworks (before signing)..."
            if [ -d "Payload/App.app/Frameworks" ]; then
              for framework in Payload/App.app/Frameworks/*.framework; do
                if [ -d "$framework" ] && [ -f "$framework/Info.plist" ]; then
                  FRAMEWORK_NAME=$(basename "$framework" .framework)
                  echo "  🔧 Updating bundle ID for $FRAMEWORK_NAME..."
                  /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier com.qaonline.app.$FRAMEWORK_NAME" "$framework/Info.plist" 2>/dev/null || echo "  Could not update $FRAMEWORK_NAME bundle ID"
                fi
              done
            fi
            
            # Find signing identity
            SIGNING_IDENTITY=""
            if security find-identity -v -p codesigning build.keychain 2>/dev/null | grep -q "Apple Distribution"; then
              SIGNING_IDENTITY=$(security find-identity -v -p codesigning build.keychain | grep "Apple Distribution" | head -1 | cut -d'"' -f2)
            elif security find-identity -v -p codesigning build.keychain 2>/dev/null | grep -q "iPhone Distribution"; then
              SIGNING_IDENTITY=$(security find-identity -v -p codesigning build.keychain | grep "iPhone Distribution" | head -1 | cut -d'"' -f2)
            fi
            
            if [ -n "$SIGNING_IDENTITY" ]; then
              echo "✅ Found signing identity: $SIGNING_IDENTITY"
              
              # Sign frameworks first (CRITICAL for App Store Connect validation)
              if [ -d "Payload/App.app/Frameworks" ]; then
                echo "🔐 Signing frameworks individually..."
                
                # Ensure keychain is unlocked and accessible
                security unlock-keychain -p "" build.keychain
                security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
                
                for framework in Payload/App.app/Frameworks/*.framework; do
                  if [ -d "$framework" ]; then
                    echo "  🔐 Signing $(basename "$framework")..."
                    
                    # Ensure keychain is accessible for this signing operation
                    security unlock-keychain -p "" build.keychain
                    
                    # Extract entitlements from provisioning profile for frameworks
                    if [ -f "QAOnlineAppStoreProfile.mobileprovision" ]; then
                      echo "  📄 Extracting entitlements from provisioning profile..."
                      security cms -D -i QAOnlineAppStoreProfile.mobileprovision > profile.plist 2>/dev/null || echo "Could not extract profile"
                      if [ -f "profile.plist" ]; then
                        /usr/libexec/PlistBuddy -x -c "Print :Entitlements" profile.plist > framework_entitlements.plist 2>/dev/null || echo "No entitlements in profile"
                      fi
                    fi
                    
                    # Try primary signing approach with entitlements
                    if [ -f "framework_entitlements.plist" ]; then
                      echo "  🔐 Signing with entitlements..."
                      if codesign --force --sign "$SIGNING_IDENTITY" --entitlements framework_entitlements.plist --verbose "$framework" 2>&1; then
                        echo "  ✅ $(basename "$framework") signed successfully with entitlements"
                      else
                        echo "  ❌ Failed to sign $(basename "$framework") with entitlements, trying without..."
                        if codesign --force --sign "$SIGNING_IDENTITY" --verbose "$framework" 2>&1; then
                          echo "  ✅ $(basename "$framework") signed successfully without entitlements"
                        else
                          echo "  ❌ Failed to sign $(basename "$framework") with primary method"
                          echo "  🔍 Attempting with explicit keychain parameter..."
                          
                          # Try alternative signing approach with explicit keychain
                          if codesign --force --sign "$SIGNING_IDENTITY" --keychain build.keychain --verbose "$framework" 2>&1; then
                            echo "  ✅ $(basename "$framework") signed with alternative method"
                          else
                            echo "  ❌ All signing attempts failed for $(basename "$framework")"
                            echo "  🔍 Checking framework permissions and structure..."
                            ls -la "$framework"
                            echo "  📋 Available identities:"
                            security find-identity -v -p codesigning build.keychain
                            echo "  🔍 Last codesign error output above"
                            exit 1
                          fi
                        fi
                      fi
                    else
                      # No entitlements available, sign without them
                      if codesign --force --sign "$SIGNING_IDENTITY" --verbose "$framework" 2>&1; then
                        echo "  ✅ $(basename "$framework") signed successfully"
                      else
                        echo "  ❌ Failed to sign $(basename "$framework") with primary method"
                        echo "  🔍 Attempting with explicit keychain parameter..."
                        
                        # Try alternative signing approach with explicit keychain
                        if codesign --force --sign "$SIGNING_IDENTITY" --keychain build.keychain --verbose "$framework" 2>&1; then
                          echo "  ✅ $(basename "$framework") signed with alternative method"
                        else
                          echo "  ❌ All signing attempts failed for $(basename "$framework")"
                          echo "  🔍 Checking framework permissions and structure..."
                          ls -la "$framework"
                          echo "  📋 Available identities:"
                          security find-identity -v -p codesigning build.keychain
                          echo "  🔍 Last codesign error output above"
                          exit 1
                        fi
                      fi
                    fi
                  fi
                done
                echo "✅ All frameworks signed successfully"
              else
                echo "ℹ️  No frameworks directory found"
              fi
              
              # Now sign the main app bundle (must be done after frameworks)
              echo "🔐 Signing main app bundle with entitlements..."
              security unlock-keychain -p "" build.keychain
              
              # Create main app entitlements from provisioning profile
              if [ -f "profile.plist" ]; then
                echo "📄 Creating main app entitlements..."
                /usr/libexec/PlistBuddy -x -c "Print :Entitlements" profile.plist > app_entitlements.plist 2>/dev/null || echo "No entitlements in profile"
              fi
              
              # Sign main app with entitlements
              if [ -f "app_entitlements.plist" ]; then
                echo "🔐 Signing main app with entitlements..."
                if codesign --force --sign "$SIGNING_IDENTITY" --entitlements app_entitlements.plist --verbose Payload/App.app/ 2>&1; then
                  echo "✅ Main app bundle signed successfully with entitlements"
                else
                  echo "❌ Failed to sign main app with entitlements, trying without..."
                  if codesign --force --sign "$SIGNING_IDENTITY" --verbose Payload/App.app/ 2>&1; then
                    echo "✅ Main app bundle signed successfully without entitlements"
                  else
                    echo "❌ Failed to sign main app bundle with primary method"
                    echo "🔍 Attempting with explicit keychain parameter..."
                    
                    # Try alternative signing approach for main app
                    if codesign --force --sign "$SIGNING_IDENTITY" --keychain build.keychain --verbose Payload/App.app/ 2>&1; then
                      echo "✅ Main app bundle signed with alternative method"
                    else
                      echo "❌ All signing attempts failed for main app bundle"
                      echo "🔍 Checking app bundle permissions and structure..."
                      ls -la Payload/App.app/
                      echo "📋 Available identities:"
                      security find-identity -v -p codesigning build.keychain
                      echo "🔍 Last codesign error output above"
                      exit 1
                    fi
                  fi
                fi
              else
                # No entitlements available, sign without them
                echo "🔐 Signing main app without entitlements..."
                if codesign --force --sign "$SIGNING_IDENTITY" --verbose Payload/App.app/ 2>&1; then
                  echo "✅ Main app bundle signed successfully"
                else
                  echo "❌ Failed to sign main app bundle with primary method"
                  echo "🔍 Attempting with explicit keychain parameter..."
                  
                  # Try alternative signing approach for main app
                  if codesign --force --sign "$SIGNING_IDENTITY" --keychain build.keychain --verbose Payload/App.app/ 2>&1; then
                    echo "✅ Main app bundle signed with alternative method"
                  else
                    echo "❌ All signing attempts failed for main app bundle"
                    echo "🔍 Checking app bundle permissions and structure..."
                    ls -la Payload/App.app/
                    echo "📋 Available identities:"
                    security find-identity -v -p codesigning build.keychain
                    echo "🔍 Last codesign error output above"
                    exit 1
                  fi
                fi
              fi
              
              # Verify all signatures
              echo "🔍 Verifying signatures..."
              if [ -d "Payload/App.app/Frameworks" ]; then
                for framework in Payload/App.app/Frameworks/*.framework; do
                  if [ -d "$framework" ]; then
                    if codesign --verify "$framework" 2>/dev/null; then
                      echo "  ✅ $(basename "$framework") signature verified"
                    else
                      echo "  ❌ $(basename "$framework") signature verification failed"
                      exit 1
                    fi
                  fi
                done
              fi
              
              if codesign --verify Payload/App.app/ 2>/dev/null; then
                echo "✅ Main app signature verified"
              else
                echo "❌ Main app signature verification failed"
                exit 1
              fi
              
              echo "🎉 Framework signing fixes applied successfully!"
            else
              echo "⚠️  No signing identity found - using unsigned IPA (will likely fail at App Store)"
            fi
            
            # Verify executable
            if [ -f "Payload/App.app/App" ]; then
              EXEC_TYPE=$(file Payload/App.app/App)
              echo "🔍 Executable type: $EXEC_TYPE"
              if echo "$EXEC_TYPE" | grep -q "Mach-O"; then
                echo "✅ Valid iOS executable"
              fi
            fi
            
            # Fix Info.plist version format for App Store compliance
            echo "🔧 Fixing version format in Info.plist..."
            python3 -c "
            import plistlib
            import shutil
            
            # Read the current Info.plist
            with open('Payload/App.app/Info.plist', 'rb') as f:
                plist = plistlib.load(f)
            
            # Backup original
            shutil.copy('Payload/App.app/Info.plist', 'Payload/App.app/Info.plist.backup')
            
            # Fix the version string - remove invalid prefixes
            old_version = plist['CFBundleShortVersionString']
            new_version = old_version.replace('release-v', '').replace('v', '')
            plist['CFBundleShortVersionString'] = new_version
            
            print(f'Version fixed: {old_version} -> {new_version}')
            
            # Write the corrected Info.plist
            with open('Payload/App.app/Info.plist', 'wb') as f:
                plistlib.dump(plist, f)
            
            print('Info.plist updated for App Store compliance')
            "
            
            # Create IPA
            echo "📦 Creating final IPA..."
            zip -r App.ipa Payload/
            
            if [ ! -f "App.ipa" ]; then
              echo "❌ ERROR: Failed to create IPA!"
              exit 1
            fi
            
            echo "✅ IPA created: $(ls -lh App.ipa)"
            rm -rf Payload/
            
            # Install fastlane and required dependencies
            echo "📦 Installing Fastlane and dependencies..."
            sudo gem install fastlane --no-document
            pip3 install PyJWT requests
            
            # Upload to App Store Connect
            echo "🚀 Uploading to App Store Connect..."
            
            if [ ! -f "AuthKey_${API_KEY_ID}.p8" ]; then
              echo "❌ ERROR: API key file AuthKey_${API_KEY_ID}.p8 not found!"
              exit 1
            fi
            
            echo "📱 Uploading IPA: $(ls -lh App.ipa)"
            echo "🔑 Using API Key: $API_KEY_ID"
            echo "🏢 Issuer ID: $ISSUER_ID"
            
            # Debug API key format
            echo "🔍 API Key format check:"
            head -1 "AuthKey_${API_KEY_ID}.p8" || echo "Cannot read API key file"
            
            # Create directory for API key (required by altool)
            mkdir -p ~/.appstoreconnect/private_keys
            cp "AuthKey_${API_KEY_ID}.p8" ~/.appstoreconnect/private_keys/
            
                        # Try Fastlane first (most reliable for iOS App Store uploads)
            echo "🚀 Attempting upload with Fastlane..."
            
            # Create API key object for Fastlane
            echo '{' > api_key.json
            echo "  \"key_id\": \"$API_KEY_ID\"," >> api_key.json
            echo "  \"issuer_id\": \"$ISSUER_ID\"," >> api_key.json
            echo "  \"key\": \"$(cat AuthKey_${API_KEY_ID}.p8 | base64 | tr -d '\n')\"," >> api_key.json
            echo "  \"duration\": 1200," >> api_key.json
            echo "  \"in_house\": false" >> api_key.json
            echo '}' >> api_key.json
            
            if fastlane run upload_to_app_store \
              ipa:"App.ipa" \
              api_key:"$(cat api_key.json)" \
              skip_metadata:true \
              skip_screenshots:true \
              force:true; then
              echo "🎉 SUCCESS: App uploaded to App Store Connect via Fastlane!"
              rm -f api_key.json
            else
              echo "⚠️ Fastlane failed, trying altool..."
              rm -f api_key.json
              
              # Try altool as fallback (proper iOS App Store upload tool)
              echo "🚀 Attempting upload with xcrun altool..."
              if xcrun altool --upload-app \
                --file "$(pwd)/App.ipa" \
                --type ios \
                --apiKey "$API_KEY_ID" \
                --apiIssuer "$ISSUER_ID" \
                --verbose; then
                echo "🎉 SUCCESS: App uploaded to App Store Connect via altool!"
                echo "❌ All upload methods failed!"
                echo ""
                echo "🔍 TROUBLESHOOTING GUIDE:"
                echo "📋 1. Check API key permissions in App Store Connect:"
                echo "   - Go to Users and Access > Keys"
                echo "   - Ensure key has 'App Manager' or 'Admin' role"
                echo "   - Verify 'Access to App Store Connect API' is enabled"
                echo ""
                echo "📋 2. Check API key status:"
                echo "   - Ensure key is not expired"
                echo "   - Verify key is still active"
                echo ""
                echo "📋 3. Check app configuration:"
                echo "   - Verify bundle ID matches App Store Connect"
                echo "   - Ensure app exists in App Store Connect"
                echo "   - Check if app record exists for 'com.qaonline.app'"
                echo ""
                exit 1
              fi
            fi
            
            echo "🎉 UPLOAD COMPLETE!"
            echo "📱 Your app is now processing in App Store Connect"
            echo "🔗 Check status at: https://appstoreconnect.apple.com"
            echo "📲 Once processing completes, it will be available in TestFlight"
            
            # Cleanup
            rm -f App.ipa
            security delete-keychain build.keychain || echo "Keychain cleanup done"

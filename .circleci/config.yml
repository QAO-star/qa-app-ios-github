version: 2.1

# Use CircleCI's macOS executors for iOS builds
executors:
  macos:
    macos:
      xcode: "15.2.0"  # Latest stable Xcode version
  node:
    docker:
      - image: cimg/node:18.19

# Define reusable commands
commands:
  setup_node:
    description: "Setup Node.js environment"
    steps:
      - run:
          name: "Setup Node.js"
          command: |
            echo "üì¶ Setting up Node.js..."
            node --version
            npm --version
      
  install_dependencies:
    description: "Install project dependencies"
    steps:
      - run:
          name: "Install dependencies"
          command: |
            echo "üì¶ Installing dependencies..."
            npm install
            npm install -g @capacitor/cli
      
  setup_ios_platform:
    description: "Setup iOS platform with Capacitor"
    steps:
      - run:
          name: "Setup iOS platform"
          command: |
            echo "üì± Setting up iOS platform..."
            if [ -d "ios" ] && [ ! -f "ios/App/Podfile" ]; then
              echo "Removing incomplete iOS platform..."
              rm -rf ios
            fi
            if [ ! -d "ios/App/App.xcworkspace" ]; then
              echo "Adding iOS platform..."
              npx cap add ios
            fi
            echo "üîÑ Syncing Capacitor..."
            npx cap sync ios
      
  setup_xcode:
    description: "Setup Xcode environment"
    steps:
      - run:
          name: "Setup Xcode"
          command: |
            echo "üîß Setting up Xcode..."
            xcodebuild -version
            sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
      
      - run:
          name: "Sign in to Apple Developer Account"
          command: |
            echo "üçé Signing in to Apple Developer Account..."
            # Create a temporary keychain for signing
            security create-keychain -p "temp" build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "temp" build.keychain
            security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
            
            # Sign in to Apple Developer account
            xcrun altool --store-password-in-keychain-item "apple-id" -u "jonatan.k@qaonline.co.il" -p "$APPLE_APP_SPECIFIC_PASSWORD" --keychain build.keychain || echo "‚ö†Ô∏è Apple ID sign-in failed, continuing..."
            
            echo "‚úÖ Xcode setup completed"
      
  install_ios_dependencies:
    description: "Install iOS dependencies with CocoaPods"
    steps:
      - run:
          name: "Install iOS dependencies"
          command: |
            echo "üì¶ Installing iOS dependencies..."
            cd ios/App
            pod install --repo-update
      
  configure_signing:
    description: "Configure automatic signing for iOS builds"
    steps:
      - run:
          name: "Configure automatic signing"
          command: |
            echo "üîß Configuring automatic signing..."
            cd ios/App
            
            # Ensure all projects use automatic signing
            sed -i '' 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' App.xcodeproj/project.pbxproj
            sed -i '' 's/CODE_SIGN_STYLE = "Manual";/CODE_SIGN_STYLE = "Automatic";/g' App.xcodeproj/project.pbxproj
            sed -i '' 's/CODE_SIGNING_REQUIRED = NO;/CODE_SIGNING_REQUIRED = YES;/g' App.xcodeproj/project.pbxproj
            sed -i '' 's/CODE_SIGNING_ALLOWED = NO;/CODE_SIGNING_ALLOWED = YES;/g' App.xcodeproj/project.pbxproj
            
            # Configure Pods for automatic signing
            if [ -f "Pods/Pods.xcodeproj/project.pbxproj" ]; then
              echo "üîß Configuring Pods for automatic signing..."
              sed -i '' '/PROVISIONING_PROFILE_SPECIFIER/d' Pods/Pods.xcodeproj/project.pbxproj
              sed -i '' 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' Pods/Pods.xcodeproj/project.pbxproj
              sed -i '' 's/CODE_SIGN_STYLE = "Manual";/CODE_SIGN_STYLE = "Automatic";/g' Pods/Pods.xcodeproj/project.pbxproj
              sed -i '' '/CODE_SIGN_IDENTITY.*iPhone Distribution/d' Pods/Pods.xcodeproj/project.pbxproj
              sed -i '' 's/CODE_SIGN_IDENTITY = "iPhone Distribution";/CODE_SIGN_IDENTITY = "";/g' Pods/Pods.xcodeproj/project.pbxproj
            fi
            
            echo "‚úÖ Automatic signing configured for all targets"
      
  setup_fastlane:
    description: "Setup Fastlane for certificate management"
    steps:
      - run:
          name: "Install Fastlane"
          command: |
            echo "üíé Installing Fastlane..."
            gem install fastlane
            echo "‚úÖ Fastlane installed successfully"

# Define jobs
jobs:
  # Test build - runs on every push to main
  test_build:
    executor: node
    steps:
      - checkout
      - setup_node
      - install_dependencies
      - run:
          name: "Test web build"
          command: |
            echo "üî® Testing web build..."
            npm run build
            echo "‚úÖ Web build test completed successfully!"
      - store_artifacts:
          path: dist/
          destination: web-build

  # iOS test build - unsigned build for testing
  ios_test_build:
    executor: macos
    steps:
      - checkout
      - setup_node
      - install_dependencies
      - setup_ios_platform
      - setup_xcode
      - install_ios_dependencies
      - configure_signing
      - run:
          name: "iOS test build (unsigned)"
          command: |
            echo "üî® Testing iOS build..."
            cd ios/App
            xcodebuild clean -workspace App.xcworkspace -scheme App -configuration Release
            xcodebuild build \
              -workspace App.xcworkspace \
              -scheme App \
              -configuration Release \
              -destination generic/platform=iOS \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGNING_ALLOWED=NO
            echo "‚úÖ iOS test build completed successfully!"
      - store_artifacts:
          path: ios/App/build/
          destination: ios-test-build

  # iOS App Store build - signed build for App Store
  ios_app_store_build:
    executor: macos
    steps:
      - checkout
      - setup_node
      - install_dependencies
      - setup_ios_platform
      - setup_xcode
      - install_ios_dependencies
      - configure_signing
      - setup_fastlane
      - run:
          name: "Test API key authentication"
          command: |
            cd ios/App
            fastlane test_api_key
      - run:
          name: "Test signing setup"
          command: |
            cd ios/App
            chmod +x test-signing-setup.sh
            ./test-signing-setup.sh
      
      - run:
          name: "Generate certificates and profiles"
          command: |
            cd ios/App
            fastlane certificates
            
            # Install certificates and profiles if they exist
            if [ -f "certificates/distribution.cer" ]; then
              echo "üîê Installing distribution certificate..."
              security import certificates/distribution.cer -k ~/Library/Keychains/login.keychain-db -T /usr/bin/codesign
            fi
            
            if [ -f "certificates/distribution.p12" ]; then
              echo "üîê Installing P12 certificate..."
              security import certificates/distribution.p12 -k ~/Library/Keychains/login.keychain-db -T /usr/bin/codesign
            fi
            
            if [ -f "certificates/QA-Online-App-Store-Profile.mobileprovision" ]; then
              echo "üìã Installing provisioning profile..."
              mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
              cp certificates/QA-Online-App-Store-Profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
            fi
            
            # Show available signing identities
            echo "üîç Available signing identities:"
            security find-identity -v -p codesigning ~/Library/Keychains/login.keychain-db
      - run:
          name: "Build signed iOS app"
          command: |
            echo "üî® Building signed iOS app..."
            cd ios/App
            
            # Make the signing script executable and run it
            chmod +x sign-and-export.sh
            ./sign-and-export.sh
      - run:
          name: "Upload to App Store Connect"
          command: |
            cd ios/App
            fastlane upload
      - store_artifacts:
          path: ios/App/App.ipa
          destination: ios-app-store-build
      - store_artifacts:
          path: ios/App/certificates/
          destination: certificates

# Define workflows
workflows:
  version: 2
  
  # Release workflow - runs on tags only
  release:
    jobs:
      - ios_app_store_build:
          filters:
            tags:
              only: /^release-.*/
            branches:
              ignore: /.*/

version: 2.1

orbs:
  macos: circleci/macos@2

workflows:
  simple_sign_workflow:
    jobs:
      - upload_to_appstore:
          filters:
            branches:
              only: [main, simple-sign]

jobs:
  upload_to_appstore:
    macos:
      xcode: 16.0
    resource_class: macos.m1.large.gen1
    
    steps:
      - checkout
      
      - run:
          name: "Setup Environment"
          command: |
            set -e
            echo "🚀 Starting App Store Connect upload process"
            echo "🔍 Current directory: $(pwd)"
            echo "📋 Repository contents:"
            ls -la
            
            # Read essential configuration
            APPLE_TEAM_ID=$(cat team.id | tr -d '\n\r' | head -1)
            APPLE_ID=$(cat apple.id | tr -d '\n\r' | head -1)
            API_KEY_ID=$(cat AuthKey_ZA7M4DJPV8.id | tr -d '\n\r' | head -1)
            
            echo "✅ Configuration loaded:"
            echo "  Team ID: $APPLE_TEAM_ID"
            echo "  Apple ID: $APPLE_ID"
            echo "  API Key ID: $API_KEY_ID"
            
            # Export for later steps
            echo "export APPLE_TEAM_ID='$APPLE_TEAM_ID'" >> $BASH_ENV
            echo "export APPLE_ID='$APPLE_ID'" >> $BASH_ENV
            echo "export API_KEY_ID='$API_KEY_ID'" >> $BASH_ENV

      - run:
          name: "Setup Certificates and Keychain"
          command: |
            set -e
            echo "🔐 Setting up certificates and keychain"
            
            # Create keychain
            security create-keychain -p "" build.keychain || echo "Keychain already exists"
            security list-keychains -s build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "" build.keychain
            security set-keychain-settings build.keychain
            
            # Install certificates
            if [ -f "auto_distribution.cer" ]; then
              echo "📄 Installing Apple Distribution certificate"
              security import auto_distribution.cer -k build.keychain -T /usr/bin/codesign
            fi
            
            if [ -f "auto_distribution_private_key.pem" ]; then
              echo "🔑 Installing private key"
              security import auto_distribution_private_key.pem -k build.keychain -T /usr/bin/codesign
            fi
            
            # Verify certificates
            echo "🔍 Available signing identities:"
            security find-identity -v -p codesigning build.keychain
            
            echo "✅ Certificate setup complete"

      - run:
          name: "Prepare IPA from Signed Archive"
          command: |
            set -e
            echo "📦 Preparing IPA from existing signed archive"
            
            # Check for signed IPA archive
            if [ ! -f "signed-ipa.zip" ]; then
              echo "❌ ERROR: signed-ipa.zip not found!"
              exit 1
            fi
            
            echo "✅ Found signed-ipa.zip"
            echo "📊 Archive size: $(ls -lh signed-ipa.zip | awk '{print $5}')"
            
            # Extract the archive
            echo "📂 Extracting signed archive..."
            unzip -o signed-ipa.zip
            
            # Verify Payload structure
            if [ ! -d "Payload" ]; then
              echo "❌ ERROR: No Payload directory found in archive!"
              exit 1
            fi
            
            if [ ! -d "Payload/App.app" ]; then
              echo "❌ ERROR: No App.app found in Payload!"
              exit 1
            fi
            
            echo "✅ Valid app structure found"
            echo "📱 App contents:"
            ls -la Payload/App.app/ | head -10
            
            # Check if executable exists and is valid
            if [ -f "Payload/App.app/App" ]; then
              EXEC_TYPE=$(file Payload/App.app/App)
              echo "🔍 Executable type: $EXEC_TYPE"
              
              if echo "$EXEC_TYPE" | grep -q "Mach-O"; then
                echo "✅ Valid iOS executable found"
              else
                echo "⚠️ Executable may not be valid iOS binary"
              fi
            else
              echo "❌ ERROR: No App executable found!"
              exit 1
            fi
            
            # Create final IPA
            echo "📦 Creating final IPA..."
            zip -r App.ipa Payload/
            
            if [ -f "App.ipa" ]; then
              echo "✅ IPA created successfully"
              echo "📊 IPA size: $(ls -lh App.ipa | awk '{print $5}')"
            else
              echo "❌ ERROR: Failed to create IPA!"
              exit 1
            fi
            
            # Clean up
            rm -rf Payload/
            
            echo "✅ IPA preparation complete"

      - run:
          name: "Install Fastlane"
          command: |
            set -e
            echo "📦 Installing Fastlane"
            sudo gem install fastlane
            echo "✅ Fastlane installed: $(fastlane --version)"

      - run:
          name: "Upload to App Store Connect"
          command: |
            set -e
            echo "🚀 Uploading to App Store Connect"
            
            # Verify IPA exists
            if [ ! -f "App.ipa" ]; then
              echo "❌ ERROR: App.ipa not found!"
              exit 1
            fi
            
            # Verify API key exists
            if [ ! -f "AuthKey_${API_KEY_ID}.p8" ]; then
              echo "❌ ERROR: API key file not found!"
              exit 1
            fi
            
            echo "📱 IPA to upload: $(ls -lh App.ipa)"
            echo "🔑 Using API Key: $API_KEY_ID"
            echo "👤 Apple ID: $APPLE_ID"
            echo "🏢 Team ID: $APPLE_TEAM_ID"
            
            # Upload using Fastlane
            echo "🚀 Starting upload to App Store Connect..."
            fastlane run upload_to_app_store \
              ipa:"App.ipa" \
              api_key_path:"AuthKey_${API_KEY_ID}.p8" \
              api_key:"$API_KEY_ID" \
              issuer_id:"6751101564" \
              skip_waiting_for_build_processing:true \
              skip_metadata:true \
              skip_screenshots:true \
              force:true
            
            if [ $? -eq 0 ]; then
              echo "🎉 SUCCESS: App uploaded to App Store Connect!"
              echo "📱 Your app is now available in TestFlight"
              echo "🔗 Check status at: https://appstoreconnect.apple.com"
            else
              echo "❌ Upload failed, trying alternative method..."
              
              # Fallback to altool
              echo "🔄 Attempting upload with altool..."
              xcrun altool --upload-app \
                --file "App.ipa" \
                --type ios \
                --apiKey "$API_KEY_ID" \
                --apiIssuer "6751101564" \
                --verbose
              
              if [ $? -eq 0 ]; then
                echo "🎉 SUCCESS: App uploaded via altool!"
              else
                echo "❌ Both upload methods failed"
                exit 1
              fi
            fi

      - run:
          name: "Cleanup"
          command: |
            echo "🧹 Cleaning up temporary files"
            rm -f App.ipa
            security delete-keychain build.keychain || echo "Keychain cleanup completed"
            echo "✅ Cleanup complete"
          when: always

version: 2.1

workflows:
  simple_sign_workflow:
    jobs:
      - simple_sign_and_upload:
          filters:
            branches:
              only: [main, simple-sign]

jobs:
  simple_sign_and_upload:
    macos:
      xcode: "15.3.0"
    resource_class: macos.m1.medium.gen1
    
    steps:
      - checkout
      
      - run:
          name: "Setup Environment and Upload to App Store"
          command: |
            set -e
            
            # Read configuration
            APPLE_TEAM_ID=$(cat team.id | tr -d '\n\r' | head -1)
            APPLE_ID=$(cat apple.id | tr -d '\n\r' | head -1)
            API_KEY_ID=$(cat AuthKey_ZA7M4DJPV8.id | tr -d '\n\r' | head -1)
            
            echo "🚀 Starting App Store Connect upload"
            echo "📋 Configuration:"
            echo "  Team ID: $APPLE_TEAM_ID"
            echo "  Apple ID: $APPLE_ID" 
            echo "  API Key ID: $API_KEY_ID"
            
            # Setup keychain
            echo "🔐 Setting up keychain..."
            if ! security list-keychains | grep -q "build.keychain"; then
              security create-keychain -p "" build.keychain
            fi
            security list-keychains -s build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "" build.keychain
            security set-keychain-settings build.keychain
            
            # Install certificates
            echo "🔐 Installing certificates..."
            if [ -f "auto_distribution.cer" ]; then
              security import auto_distribution.cer -k build.keychain -T /usr/bin/codesign
            fi
            if [ -f "auto_distribution_private_key.pem" ]; then
              security import auto_distribution_private_key.pem -k build.keychain -T /usr/bin/codesign
            fi
            
            # Verify signing identity
            echo "🔍 Available signing identities:"
            security find-identity -v -p codesigning build.keychain
            
            # Extract and prepare IPA
            echo "📦 Preparing IPA from signed archive..."
            if [ ! -f "signed-ipa.zip" ]; then
              echo "❌ ERROR: signed-ipa.zip not found!"
              exit 1
            fi
            
            echo "✅ Found signed-ipa.zip"
            unzip -o signed-ipa.zip
            
            if [ ! -d "Payload" ]; then
              echo "❌ ERROR: No Payload directory found!"
              exit 1
            fi
            
            if [ ! -d "Payload/App.app" ]; then
              echo "❌ ERROR: No App.app found in Payload!"
              exit 1
            fi
            
            echo "✅ Valid app structure found"
            
            # Verify executable
            if [ -f "Payload/App.app/App" ]; then
              EXEC_TYPE=$(file Payload/App.app/App)
              echo "🔍 Executable type: $EXEC_TYPE"
              if echo "$EXEC_TYPE" | grep -q "Mach-O"; then
                echo "✅ Valid iOS executable"
              fi
            fi
            
            # Create IPA
            echo "📦 Creating final IPA..."
            zip -r App.ipa Payload/
            
            if [ ! -f "App.ipa" ]; then
              echo "❌ ERROR: Failed to create IPA!"
              exit 1
            fi
            
            echo "✅ IPA created: $(ls -lh App.ipa)"
            rm -rf Payload/
            
            # Install fastlane
            echo "📦 Installing Fastlane..."
            sudo gem install fastlane --no-document
            
            # Upload to App Store Connect
            echo "🚀 Uploading to App Store Connect..."
            
            if [ ! -f "AuthKey_${API_KEY_ID}.p8" ]; then
              echo "❌ ERROR: API key file AuthKey_${API_KEY_ID}.p8 not found!"
              exit 1
            fi
            
            echo "📱 Uploading IPA: $(ls -lh App.ipa)"
            echo "🔑 Using API Key: $API_KEY_ID"
            echo "🏢 Issuer ID: 6751101564"
            
            # Debug API key format
            echo "🔍 API Key format check:"
            head -1 "AuthKey_${API_KEY_ID}.p8" || echo "Cannot read API key file"
            
            # Try xcrun notarytool first (newer, more reliable method)
            echo "🚀 Attempting upload with xcrun notarytool..."
            if xcrun notarytool submit App.ipa \
              --key "AuthKey_${API_KEY_ID}.p8" \
              --key-id "$API_KEY_ID" \
              --issuer "6751101564" \
              --wait; then
              echo "🎉 SUCCESS: App uploaded to App Store Connect via notarytool!"
            else
              echo "⚠️ notarytool failed, trying altool..."
              
              # Create directory for API key (required by altool)
              mkdir -p ~/.appstoreconnect/private_keys
              cp "AuthKey_${API_KEY_ID}.p8" ~/.appstoreconnect/private_keys/
              
              # Try altool as fallback
              if xcrun altool --upload-app \
                --file "$(pwd)/App.ipa" \
                --type ios \
                --apiKey "$API_KEY_ID" \
                --apiIssuer "6751101564" \
                --verbose; then
                echo "🎉 SUCCESS: App uploaded to App Store Connect via altool!"
              else
                echo "⚠️ altool failed, trying Fastlane as last resort..."
                
                # Try Fastlane with proper API key object
                echo "🚀 Attempting upload with Fastlane (API key object)..."
                
                # Create API key object for Fastlane
                echo '{' > api_key.json
                echo "  \"key_id\": \"$API_KEY_ID\"," >> api_key.json
                echo "  \"issuer_id\": \"6751101564\"," >> api_key.json
                echo "  \"key\": \"$(cat AuthKey_${API_KEY_ID}.p8 | base64 | tr -d '\n')\"," >> api_key.json
                echo "  \"duration\": 1200," >> api_key.json
                echo "  \"in_house\": false" >> api_key.json
                echo '}' >> api_key.json
                
                if fastlane run upload_to_app_store \
                  ipa:"App.ipa" \
                  api_key:"$(cat api_key.json)" \
                  skip_metadata:true \
                  skip_screenshots:true \
                  force:true; then
                  echo "🎉 SUCCESS: App uploaded to App Store Connect via Fastlane!"
                  rm -f api_key.json
                else
                  echo "❌ All upload methods failed!"
                  echo ""
                  echo "🔍 TROUBLESHOOTING GUIDE:"
                  echo "📋 1. Check API key permissions in App Store Connect:"
                  echo "   - Go to Users and Access > Keys"
                  echo "   - Ensure key has 'App Manager' or 'Admin' role"
                  echo "   - Verify 'Access to App Store Connect API' is enabled"
                  echo ""
                  echo "📋 2. Check API key status:"
                  echo "   - Ensure key is not expired"
                  echo "   - Verify key is still active"
                  echo ""
                  echo "📋 3. Check app configuration:"
                  echo "   - Verify bundle ID matches App Store Connect"
                  echo "   - Ensure app exists in App Store Connect"
                  echo ""
                  rm -f api_key.json
                  exit 1
                fi
              fi
            fi
            
            echo "🎉 UPLOAD COMPLETE!"
            echo "📱 Your app is now processing in App Store Connect"
            echo "🔗 Check status at: https://appstoreconnect.apple.com"
            echo "📲 Once processing completes, it will be available in TestFlight"
            
            # Cleanup
            rm -f App.ipa
            security delete-keychain build.keychain || echo "Keychain cleanup done"

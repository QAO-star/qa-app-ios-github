name: Build and Deploy iOS to App Store (Signed)

on:
  push:
    tags: [ 'release-*' ]  # Triggers on release tags like release-v1.0.0
  workflow_dispatch:  # Allows manual trigger

permissions:
  contents: write
  actions: read

env:
  NODE_VERSION: '18'
  XCODE_VERSION: '15.2'

jobs:
  build-and-deploy-ios-signed:
    runs-on: macos-latest
    timeout-minutes: 30
    env:
      FASTLANE_USER: jonatan.k@qaonline.co.il
      FASTLANE_PASSWORD: kvyz-vbth-czju-ysnz
      FASTLANE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper versioning
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        npm install -g @capacitor/cli
    
    - name: Setup iOS platform
      run: |
        if [ -d "ios" ] && [ ! -f "ios/App/Podfile" ]; then
          echo "Removing incomplete iOS platform..."
          rm -rf ios
        fi
        if [ ! -d "ios/App/App.xcworkspace" ]; then
          echo "Adding iOS platform..."
          npx cap add ios
        fi
    
    - name: Sync Capacitor
      run: npx cap sync ios
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: Setup code signing environment
      run: |
        # Create a temporary keychain for the build
        echo "üîê Creating temporary keychain..."
        security create-keychain -p "" build.keychain || true
        security default-keychain -s build.keychain || true
        security unlock-keychain -p "" build.keychain || true
        security set-keychain-settings build.keychain || true
        
        # Set keychain settings
        echo "üîê Configuring keychain settings..."
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain || true
        
        # Verify keychain is working
        echo "üîê Verifying keychain setup..."
        security list-keychains
        security show-keychain-info build.keychain || true
        
        echo "üîê Setting up automatic certificate generation..."
        echo "üì± This will create certificates automatically on the GitHub runner"
        
    - name: Setup Ruby and Fastlane
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
    
    - name: Install Fastlane
      run: |
        gem install fastlane
        
    - name: Import existing certificates
      run: |
        cd ios/App
        
        echo "üîê Importing existing certificates from GitHub secrets..."
        
        # Create certificates directory
        mkdir -p certificates
        
        # Import distribution certificate from GitHub secret
        if [ -n "${{ secrets.IOS_DIST_CERTIFICATE }}" ]; then
          echo "üì¶ Importing distribution certificate..."
          echo "${{ secrets.IOS_DIST_CERTIFICATE }}" | base64 -d > certificates/distribution.p12
          echo "‚úÖ Distribution certificate imported"
        else
          echo "‚ö†Ô∏è No distribution certificate found in secrets"
        fi
        
        # Import provisioning profile from GitHub secret
        if [ -n "${{ secrets.IOS_PROVISIONING_PROFILE }}" ]; then
          echo "üìã Importing provisioning profile..."
          echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 -d > certificates/QA-Online-App-Store-Profile.mobileprovision
          echo "‚úÖ Provisioning profile imported"
        else
          echo "‚ö†Ô∏è No provisioning profile found in secrets"
        fi
        
        # Show what we have
        if [ -d "certificates" ]; then
          echo "üìÅ Certificates directory contents:"
          ls -la certificates/
        fi
        
        # Import certificates into the default keychain
        if [ -f "certificates/distribution.p12" ]; then
          echo "üîê Importing distribution certificate into default keychain..."
          
          # Try with password first (with timeout)
          if [ -n "${{ secrets.IOS_DIST_CERTIFICATE_PASSWORD }}" ]; then
            echo "üîê Trying with password..."
            timeout 30s security import certificates/distribution.p12 -k ~/Library/Keychains/login.keychain-db -T /usr/bin/codesign -P "${{ secrets.IOS_DIST_CERTIFICATE_PASSWORD }}" || echo "‚ö†Ô∏è Password import failed or timed out, trying without password..."
          fi
          
          # Try without password (with timeout)
          echo "üîê Trying without password..."
          timeout 30s security import certificates/distribution.p12 -k ~/Library/Keychains/login.keychain-db -T /usr/bin/codesign || echo "‚ö†Ô∏è Import failed or timed out, but continuing..."
          
          echo "‚úÖ Distribution certificate import completed"
        fi
        
        if [ -f "certificates/QA-Online-App-Store-Profile.mobileprovision" ]; then
          echo "üìã Installing provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp certificates/QA-Online-App-Store-Profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "‚úÖ Provisioning profile installed"
        fi
    
    - name: Configure manual signing with certificates
      run: |
        cd ios/App
        
        # Import the generated certificates
        if [ -f "certificates/distribution.p12" ]; then
          echo "üîê Importing generated distribution certificate..."
          security import certificates/distribution.p12 -k ../../build.keychain -T /usr/bin/codesign
        fi
        
        if [ -f "certificates/QA-Online-App-Store-Profile.mobileprovision" ]; then
          echo "üìã Installing generated provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp certificates/QA-Online-App-Store-Profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        fi
        
        # Update the main app project for manual signing
        sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' App.xcodeproj/project.pbxproj
        sed -i '' 's/CODE_SIGN_STYLE = "Automatic";/CODE_SIGN_STYLE = "Manual";/g' App.xcodeproj/project.pbxproj
        sed -i '' 's/CODE_SIGNING_REQUIRED = NO;/CODE_SIGNING_REQUIRED = YES;/g' App.xcodeproj/project.pbxproj
        sed -i '' 's/CODE_SIGNING_ALLOWED = NO;/CODE_SIGNING_ALLOWED = YES;/g' App.xcodeproj/project.pbxproj
        
        # Update the Pods project if it exists
        if [ -f "Pods/Pods.xcodeproj/project.pbxproj" ]; then
            sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' Pods/Pods.xcodeproj/project.pbxproj
            sed -i '' 's/CODE_SIGN_STYLE = "Automatic";/CODE_SIGN_STYLE = "Manual";/g' Pods/Pods.xcodeproj/project.pbxproj
            sed -i '' 's/CODE_SIGNING_REQUIRED = NO;/CODE_SIGNING_REQUIRED = YES;/g' Pods/Pods.xcodeproj/project.pbxproj
            sed -i '' 's/CODE_SIGNING_ALLOWED = NO;/CODE_SIGNING_ALLOWED = YES;/g' Pods/Pods.xcodeproj/project.pbxproj
        fi
        
        echo "‚úÖ Manual signing configured for all targets"
        
        # Show available signing identities
        echo "Available signing identities:"
        security find-identity -v -p codesigning ../../build.keychain
    
    - name: Install iOS dependencies
      run: |
        cd ios/App
        pod install --repo-update
    
    - name: Configure iOS build settings
      run: |
        cd ios/App
        /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier com.qaonline.app" App/Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName QA-Online" App/Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ github.ref_name == 'main' && '1.0.0' || github.ref_name }}" App/Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ github.run_number }}" App/Info.plist
    
    - name: Build iOS app with code signing
      run: |
        cd ios/App
        xcodebuild clean -workspace App.xcworkspace -scheme App -configuration Release
        
        xcodebuild archive \
          -workspace App.xcworkspace \
          -scheme App \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath App.xcarchive \
          DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
          PRODUCT_BUNDLE_IDENTIFIER="com.qaonline.app" \
          CODE_SIGN_STYLE="Manual" \
          CODE_SIGN_IDENTITY="iPhone Distribution" \
          PROVISIONING_PROFILE_SPECIFIER="QA-Online-App-Store-Profile" \
          CURRENT_PROJECT_VERSION="${{ github.run_number }}" \
          MARKETING_VERSION="${{ github.ref_name == 'main' && '1.0.0' || github.ref_name }}" \
          CODE_SIGN_KEYCHAIN="../../build.keychain"
    
    - name: Export signed IPA
      run: |
        cd ios/App
        xcodebuild -exportArchive \
          -archivePath App.xcarchive \
          -exportPath . \
          -exportOptionsPlist exportOptions.plist \
          CODE_SIGN_KEYCHAIN="build.keychain"
    
    - name: Verify signed IPA file
      run: |
        cd ios/App
        if [ ! -f "App.ipa" ]; then
          echo "‚ùå Signed IPA file was not created!"
          exit 1
        fi
        echo "‚úÖ Signed IPA file created successfully"
        ls -la App.ipa
        
        # Verify the IPA is properly signed
        codesign -dv --verbose=4 App.ipa
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
    
    - name: Install Fastlane
      run: |
        gem install fastlane
    
    - name: Upload to App Store Connect
      run: |
        fastlane pilot upload \
          --ipa "ios/App/App.ipa" \
          --api_key_path <(echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}") \
          --api_key_id "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" \
          --issuer_id "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}" \
          --skip_waiting_for_build_processing
    
    - name: Upload signed IPA as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-app-store-signed-ipa-${{ github.run_number }}
        path: ios/App/App.ipa
        retention-days: 90
        
    - name: Store certificates for future use
      uses: actions/upload-artifact@v4
      with:
        name: ios-certificates-${{ github.run_number }}
        path: |
          ios/App/certificates/
          certificate_base64.txt
          profile_base64.txt
        retention-days: 365
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: QA-Online iOS App ${{ github.ref_name }} (Signed)
        body: |
          ## QA-Online iOS App Release ${{ github.ref_name }}
          
          ### What's New
          - ‚úÖ **Signed iOS app build** for App Store distribution
          - ‚úÖ **Automated upload to App Store Connect**
          - ‚úÖ **Ready for TestFlight testing**
          
          ### Build Information
          - Build Number: ${{ github.run_number }}
          - Commit: ${{ github.sha }}
          - Bundle ID: com.qaonline.app
          - Signing: ‚úÖ Properly signed with distribution certificate
          
          ### Status
          - **TestFlight**: Available 30 minutes after this release
          - **App Store**: Ready for review after TestFlight testing
          
          ### Download
          The signed IPA file is available as an artifact in the Actions tab.
        draft: false
        prerelease: false
        files: ios/App/App.ipa

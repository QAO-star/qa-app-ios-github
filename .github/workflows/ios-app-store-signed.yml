name: Build and Deploy iOS to App Store (Signed)

on:
  push:
    tags: [ 'release-*' ]  # Triggers on release tags like release-v1.0.0
  workflow_dispatch:  # Allows manual trigger

permissions:
  contents: write
  actions: read

env:
  NODE_VERSION: '18'
  XCODE_VERSION: '15.2'

jobs:
  build-and-deploy-ios-signed:
    runs-on: macos-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper versioning
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        npm install -g @capacitor/cli
    
    - name: Setup iOS platform
      run: |
        if [ -d "ios" ] && [ ! -f "ios/App/Podfile" ]; then
          echo "Removing incomplete iOS platform..."
          rm -rf ios
        fi
        if [ ! -d "ios/App/App.xcworkspace" ]; then
          echo "Adding iOS platform..."
          npx cap add ios
        fi
    
    - name: Sync Capacitor
      run: npx cap sync ios
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: Setup Ruby and Fastlane
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
    
    - name: Install Fastlane
      run: |
        gem install fastlane
        
    - name: Setup App Store Connect API key
      run: |
        cd ios/App
        
        echo "🔐 Setting up App Store Connect API key for automatic certificate generation..."
        
        # Create API key file for Fastlane
        mkdir -p fastlane
        echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" > fastlane/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
        chmod 600 fastlane/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
        
        # Verify API key file
        echo "🔍 API key file created:"
        ls -la fastlane/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
        echo "🔍 First line of API key:"
        head -n 1 fastlane/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
        
        # Create Fastlane configuration files
        cat > fastlane/Fastfile << 'FASTFILE_EOF'
        default_platform(:ios)

        platform :ios do
          desc "Generate certificates and provisioning profiles"
          lane :certificates do
            # Use App Store Connect API key with explicit configuration
            api_key = app_store_connect_api_key(
              key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
              issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
              key_filepath: "fastlane/AuthKey_#{ENV["APP_STORE_CONNECT_API_KEY_ID"]}.p8",
              duration: 1200,
              in_house: false
            )
            
            # Generate distribution certificate with explicit API key
            cert(
              development: false,
              output_path: "./certificates/",
              api_key: api_key
            )
            
            # Generate App Store provisioning profile with explicit API key
            sigh(
              development: false,
              app_identifier: "com.qaonline.app",
              output_path: "./certificates/",
              filename: "QA-Online-App-Store-Profile.mobileprovision",
              api_key: api_key
            )
          end
        end
        FASTFILE_EOF

        cat > fastlane/Appfile << 'APPFILE_EOF'
        app_identifier("com.qaonline.app")
        apple_id("jonatan.k@qaonline.co.il")
        team_id("BL7NANM4RM")
        APPFILE_EOF

        echo "✅ Fastlane configuration created"
        
        # Debug environment variables
        echo "🔍 Environment variables check:"
        echo "APP_STORE_CONNECT_API_KEY_ID: ${APP_STORE_CONNECT_API_KEY_ID}"
        echo "APP_STORE_CONNECT_ISSUER_ID: ${APP_STORE_CONNECT_ISSUER_ID}" 
        echo "APPLE_TEAM_ID: ${APPLE_TEAM_ID}"
        
        # Verify Fastfile contents
        echo "🔍 Fastfile contents:"
        cat fastlane/Fastfile
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    
    - name: Generate certificates and profiles with Fastlane
      run: |
        cd ios/App
        
        echo "🔐 Generating certificates and provisioning profiles..."
        
        # Verify API key file exists
        if [ ! -f "fastlane/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8" ]; then
          echo "❌ Error: API key file not found!"
          echo "Expected: fastlane/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8"
          echo "Current directory: $(pwd)"
          echo "Files in fastlane directory:"
          ls -la fastlane/
          exit 1
        fi
        
        echo "✅ API key file verified: fastlane/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8"
        
        # Create certificates directory
        mkdir -p certificates
        
        # Set environment variables for Fastlane
        export APP_STORE_CONNECT_API_KEY_ID="${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}"
        export APP_STORE_CONNECT_ISSUER_ID="${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}"
        export APPLE_TEAM_ID="${{ secrets.APPLE_TEAM_ID }}"
        
        # Run Fastlane to generate certificates
        fastlane certificates
        
        echo "✅ Certificates and profiles generated successfully"
        
        # List generated files
        echo "📁 Generated files:"
        ls -la certificates/
        
        # Install the generated provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        if [ -f "certificates/QA-Online-App-Store-Profile.mobileprovision" ]; then
          cp certificates/QA-Online-App-Store-Profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "✅ Provisioning profile installed"
        fi
        
        # Import the generated certificate
        if [ -f "certificates/distribution.cer" ]; then
          echo "🔐 Importing generated distribution certificate..."
          security import certificates/distribution.cer -k ~/Library/Keychains/login.keychain-db -T /usr/bin/codesign
          echo "✅ Certificate imported"
        fi
        
        if [ -f "certificates/distribution.p12" ]; then
          echo "🔐 Importing generated distribution certificate (P12)..."
          security import certificates/distribution.p12 -k ~/Library/Keychains/login.keychain-db -T /usr/bin/codesign
          echo "✅ P12 Certificate imported"
        fi
        
        # Verify certificates are available
        echo "🔍 Available signing identities:"
        security find-identity -v -p codesigning ~/Library/Keychains/login.keychain-db
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        FASTLANE_DISABLE_COLORS: true
        FASTLANE_SKIP_UPDATE_CHECK: true
        FASTLANE_HIDE_GITHUB_ISSUES: true
        CI: true
    
    - name: Configure manual signing
      run: |
        cd ios/App
        
        # Update the main app project for manual signing
        sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' App.xcodeproj/project.pbxproj
        sed -i '' 's/CODE_SIGN_STYLE = "Automatic";/CODE_SIGN_STYLE = "Manual";/g' App.xcodeproj/project.pbxproj
        sed -i '' 's/CODE_SIGNING_REQUIRED = NO;/CODE_SIGNING_REQUIRED = YES;/g' App.xcodeproj/project.pbxproj
        sed -i '' 's/CODE_SIGNING_ALLOWED = NO;/CODE_SIGNING_ALLOWED = YES;/g' App.xcodeproj/project.pbxproj
        
        # Update the Pods project to use Automatic signing (they don't support manual profiles)
        if [ -f "Pods/Pods.xcodeproj/project.pbxproj" ]; then
            echo "🔧 Configuring Pods for automatic signing..."
            
            # Remove all provisioning profile specifications from Pods
            sed -i '' '/PROVISIONING_PROFILE_SPECIFIER/d' Pods/Pods.xcodeproj/project.pbxproj
            
            # Set all Pods targets to automatic signing
            sed -i '' 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' Pods/Pods.xcodeproj/project.pbxproj
            sed -i '' 's/CODE_SIGN_STYLE = "Manual";/CODE_SIGN_STYLE = "Automatic";/g' Pods/Pods.xcodeproj/project.pbxproj
            
            echo "✅ Pods configured for automatic signing"
        fi
        
        echo "✅ Manual signing configured for all targets"
        
        # Show available signing identities from default keychain
        echo "Available signing identities:"
        security find-identity -v -p codesigning ~/Library/Keychains/login.keychain-db
        
        # Show installed provisioning profiles
        echo "📋 Installed provisioning profiles:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ | grep -E "(QA-Online|\.mobileprovision)" || echo "No QA-Online profiles found"
    
    - name: Install iOS dependencies
      run: |
        cd ios/App
        pod install --repo-update
    
    - name: Configure iOS build settings
      run: |
        cd ios/App
        /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier com.qaonline.app" App/Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName QA-Online" App/Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ github.ref_name == 'main' && '1.0.0' || github.ref_name }}" App/Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ github.run_number }}" App/Info.plist
    
    - name: Build iOS app with code signing
      run: |
        cd ios/App
        xcodebuild clean -workspace App.xcworkspace -scheme App -configuration Release
        
        xcodebuild archive \
          -workspace App.xcworkspace \
          -scheme App \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath App.xcarchive \
          DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
          PRODUCT_BUNDLE_IDENTIFIER="com.qaonline.app" \
          CODE_SIGN_STYLE="Manual" \
          CODE_SIGN_IDENTITY="iPhone Distribution" \
          PROVISIONING_PROFILE_SPECIFIER="QA-Online-App-Store-Profile" \
          CURRENT_PROJECT_VERSION="${{ github.run_number }}" \
          MARKETING_VERSION="${{ github.ref_name == 'main' && '1.0.0' || github.ref_name }}"
    
    - name: Export signed IPA
      run: |
        cd ios/App
        xcodebuild -exportArchive \
          -archivePath App.xcarchive \
          -exportPath . \
          -exportOptionsPlist exportOptions.plist
    
    - name: Verify signed IPA file
      run: |
        cd ios/App
        if [ ! -f "App.ipa" ]; then
          echo "❌ Signed IPA file was not created!"
          exit 1
        fi
        echo "✅ Signed IPA file created successfully"
        ls -la App.ipa
        
        # Verify the IPA is properly signed
        codesign -dv --verbose=4 App.ipa
    

    
    - name: Upload to App Store Connect
      run: |
        cd ios/App
        
        echo "🚀 Uploading to App Store Connect..."
        
        # Create upload lane in Fastfile
        cat >> fastlane/Fastfile << 'UPLOAD_EOF'

          desc "Upload to App Store Connect"
          lane :upload do
            # Use App Store Connect API key with explicit configuration
            api_key = app_store_connect_api_key(
              key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
              issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
              key_filepath: "fastlane/AuthKey_#{ENV["APP_STORE_CONNECT_API_KEY_ID"]}.p8",
              duration: 1200,
              in_house: false
            )
            
            # Upload to TestFlight with explicit API key
            pilot(
              ipa: "App.ipa",
              skip_waiting_for_build_processing: true,
              skip_submission: true,
              api_key: api_key
            )
          end
        UPLOAD_EOF

        # Run upload
        fastlane upload
        
        echo "✅ Upload to App Store Connect completed"
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        FASTLANE_DISABLE_COLORS: true
        FASTLANE_SKIP_UPDATE_CHECK: true
        FASTLANE_HIDE_GITHUB_ISSUES: true
        CI: true
    
    - name: Upload signed IPA as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-app-store-signed-ipa-${{ github.run_number }}
        path: ios/App/App.ipa
        retention-days: 90
        
    - name: Store certificates for future use
      uses: actions/upload-artifact@v4
      with:
        name: ios-certificates-${{ github.run_number }}
        path: |
          ios/App/certificates/
          certificate_base64.txt
          profile_base64.txt
        retention-days: 365
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: QA-Online iOS App ${{ github.ref_name }} (Signed)
        body: |
          ## QA-Online iOS App Release ${{ github.ref_name }}
          
          ### What's New
          - ✅ **Signed iOS app build** for App Store distribution
          - ✅ **Automated upload to App Store Connect**
          - ✅ **Ready for TestFlight testing**
          
          ### Build Information
          - Build Number: ${{ github.run_number }}
          - Commit: ${{ github.sha }}
          - Bundle ID: com.qaonline.app
          - Signing: ✅ Properly signed with distribution certificate
          
          ### Status
          - **TestFlight**: Available 30 minutes after this release
          - **App Store**: Ready for review after TestFlight testing
          
          ### Download
          The signed IPA file is available as an artifact in the Actions tab.
        draft: false
        prerelease: false
        files: ios/App/App.ipa

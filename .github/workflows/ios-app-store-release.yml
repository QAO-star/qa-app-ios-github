name: Build and Release iOS to App Store

on:
  push:
    tags: [ 'v*' ]  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual trigger
  release:
    types: [published]  # Triggers when a release is published

permissions:
  contents: write
  actions: read
  pull-requests: write

env:
  NODE_VERSION: '18'
  XCODE_VERSION: '15.2'

jobs:
  build-and-release-ios:
    runs-on: macos-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper versioning
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        npm install -g @capacitor/cli
    
    - name: Setup iOS platform
      run: |
        # Remove existing iOS platform if incomplete
        if [ -d "ios" ] && [ ! -f "ios/App/Podfile" ]; then
          echo "Removing incomplete iOS platform..."
          rm -rf ios
        fi
        
        # Add iOS platform if it doesn't exist
        if [ ! -d "ios/App/App.xcworkspace" ]; then
          echo "Adding iOS platform..."
          npx cap add ios
        fi
    
    - name: Sync Capacitor
      run: npx cap sync ios
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: Setup code signing environment
      run: |
        # Create a temporary keychain for the build
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings build.keychain
        
        # Show available signing identities
        echo "Available signing identities:"
        security find-identity -v -p codesigning
    
    - name: Configure automatic signing
      run: |
        # Enable automatic signing for all targets
        cd ios/App
        
        # Update the main app project
        sed -i '' 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' App.xcodeproj/project.pbxproj
        sed -i '' 's/CODE_SIGN_STYLE = "Manual";/CODE_SIGN_STYLE = "Automatic";/g' App.xcodeproj/project.pbxproj
        sed -i '' 's/CODE_SIGNING_REQUIRED = NO;/CODE_SIGNING_REQUIRED = YES;/g' App.xcodeproj/project.pbxproj
        sed -i '' 's/CODE_SIGNING_ALLOWED = NO;/CODE_SIGNING_ALLOWED = YES;/g' App.xcodeproj/project.pbxproj
        sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "'${{ secrets.APPLE_TEAM_ID }}'";/g' App.xcodeproj/project.pbxproj
        sed -i '' 's/DEVELOPMENT_TEAM = ".*";/DEVELOPMENT_TEAM = "'${{ secrets.APPLE_TEAM_ID }}'";/g' App.xcodeproj/project.pbxproj
        
        # Update the Pods project if it exists
        if [ -f "Pods/Pods.xcodeproj/project.pbxproj" ]; then
            sed -i '' 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' Pods/Pods.xcodeproj/project.pbxproj
            sed -i '' 's/CODE_SIGN_STYLE = "Manual";/CODE_SIGN_STYLE = "Automatic";/g' Pods/Pods.xcodeproj/project.pbxproj
            sed -i '' 's/CODE_SIGNING_REQUIRED = NO;/CODE_SIGNING_REQUIRED = YES;/g' Pods/Pods.xcodeproj/project.pbxproj
            sed -i '' 's/CODE_SIGNING_ALLOWED = NO;/CODE_SIGNING_ALLOWED = YES;/g' Pods/Pods.xcodeproj/project.pbxproj
            sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "'${{ secrets.APPLE_TEAM_ID }}'";/g' Pods/Pods.xcodeproj/project.pbxproj
            sed -i '' 's/DEVELOPMENT_TEAM = ".*";/DEVELOPMENT_TEAM = "'${{ secrets.APPLE_TEAM_ID }}'";/g' Pods/Pods.xcodeproj/project.pbxproj
        fi
        
        echo "✅ Automatic signing configured for all targets"
    
    - name: Install iOS dependencies
      run: |
        cd ios/App
        pod install --repo-update
    
    - name: Configure iOS build settings
      run: |
        cd ios/App
        # Update bundle identifier and version
        /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier com.qaonline.app" App/Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName QA-Online" App/Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ github.ref_name == 'main' && '1.0.0' || github.ref_name }}" App/Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ github.run_number }}" App/Info.plist
    
    - name: Build iOS app
      run: |
        cd ios/App
        # Clean previous builds
        xcodebuild clean -workspace App.xcworkspace -scheme App -configuration Release
        
        # Build archive with automatic signing
        xcodebuild archive \
          -workspace App.xcworkspace \
          -scheme App \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath App.xcarchive \
          -allowProvisioningUpdates \
          -allowProvisioningDeviceRegistration \
          DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
          PRODUCT_BUNDLE_IDENTIFIER="com.qaonline.app" \
          CODE_SIGN_STYLE="Automatic" \
          CODE_SIGN_IDENTITY="Apple Distribution" \
          PROVISIONING_PROFILE_SPECIFIER="" \
          CURRENT_PROJECT_VERSION="${{ github.run_number }}" \
          MARKETING_VERSION="${{ github.ref_name == 'main' && '1.0.0' || github.ref_name }}"
        
        # Export IPA for App Store
        xcodebuild -exportArchive \
          -archivePath App.xcarchive \
          -exportPath . \
          -exportOptionsPlist ../exportOptions.plist \
          -allowProvisioningUpdates
    
    - name: Verify IPA file
      run: |
        cd ios/App
        if [ ! -f "App.ipa" ]; then
          echo "❌ IPA file was not created!"
          exit 1
        fi
        echo "✅ IPA file created successfully"
        ls -la App.ipa
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
    
    - name: Install Fastlane
      run: |
        gem install fastlane
    
    - name: Upload to App Store Connect
      run: |
        fastlane pilot upload \
          --ipa "ios/App/App.ipa" \
          --api_key_path <(echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}") \
          --api_key_id "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" \
          --issuer_id "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}" \
          --skip_waiting_for_build_processing
    
    - name: Upload IPA as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-app-store-signed-ipa-${{ github.run_number }}
        path: ios/App/App.ipa
        retention-days: 90
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: QA-Online iOS App ${{ github.ref_name }}
        body: |
          ## QA-Online iOS App Release ${{ github.ref_name }}
          
          ### What's New
          - iOS app build for App Store distribution
          - Automated build and deployment to TestFlight
          
          ### Build Information
          - Build Number: ${{ github.run_number }}
          - Commit: ${{ github.sha }}
          - Bundle ID: com.qaonline.app
          
          ### Installation
          - **TestFlight**: Available 30 minutes after this release
          - **App Store**: Pending review after TestFlight testing
          
          ### Download
          The signed IPA file is available as an artifact in the Actions tab.
        draft: false
        prerelease: false
        files: ios/App/App.ipa
